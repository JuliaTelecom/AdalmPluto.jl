var documenterSearchIndex = {"docs":
[{"location":"libiio/scan/","page":"scan.jl","title":"scan.jl","text":"CurrentModule = libIIO_jl","category":"page"},{"location":"libiio/scan/#scan.jl","page":"scan.jl","title":"scan.jl","text":"","category":"section"},{"location":"libiio/scan/","page":"scan.jl","title":"scan.jl","text":"Modules = [libIIO_jl]\nPages   = [\"scan.md\"]","category":"page"},{"location":"libiio/scan/","page":"scan.jl","title":"scan.jl","text":"Modules = [libIIO_jl]\nPages   = [\"libIIO/scan.jl\"]","category":"page"},{"location":"libiio/scan/#AdalmPluto.libIIO_jl.C_iio_context_info_get_description-Tuple{Ptr{iio_context_info}}","page":"scan.jl","title":"AdalmPluto.libIIO_jl.C_iio_context_info_get_description","text":"C_iio_context_info_get_description(context)\n\nGet a description of a discovered context.\n\nParameters\n\ncontext::Ptr{iio_context_info}: A pointer to an iio_context_info structure.\n\nReturns\n\nA pointer to a static NULL-terminated string\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/scan/#AdalmPluto.libIIO_jl.C_iio_context_info_get_uri-Tuple{Ptr{iio_context_info}}","page":"scan.jl","title":"AdalmPluto.libIIO_jl.C_iio_context_info_get_uri","text":"C_iio_context_info_get_uri(context)\n\nGet the URI of a discovered context.\n\nParameters\n\ncontext::Ptr{iio_context_info}: A pointer to an iio_context_info structure.\n\nReturns\n\nA pointer to a static NULL-terminated string\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/scan/#AdalmPluto.libIIO_jl.C_iio_context_info_list_free-Tuple{Ptr{Ptr{iio_context_info}}}","page":"scan.jl","title":"AdalmPluto.libIIO_jl.C_iio_context_info_list_free","text":"C_iio_context_info_list_free(ptr_context)\n\nFree a context info list.\n\nParameters\n\nptr_context::Ptr{Ptr{iio_context_info}} : A pointer to a const struct iio_context_info * typed variable.\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/scan/#AdalmPluto.libIIO_jl.C_iio_create_scan_block","page":"scan.jl","title":"AdalmPluto.libIIO_jl.C_iio_create_scan_block","text":"C_iio_create_scan_block(backend, flags)\n\nCreate a scan block.\n\nParameters\n\nbackend::String: A NULL-terminated string containing the backend to use for scanning. If NULL, all the available backends are used.\nflags::UInt32 : Unused for now. Set to 0.\n\nReturns\n\nOn success, a pointer to a iio_scan_block structure\nOn failure, NULL is returned and errno is set appropriately\n\nIntroduced in version 0.20.\n\nlibIIO documentation\n\n\n\n\n\n","category":"function"},{"location":"libiio/scan/#AdalmPluto.libIIO_jl.C_iio_create_scan_context","page":"scan.jl","title":"AdalmPluto.libIIO_jl.C_iio_create_scan_context","text":"C_iio_create_scan_context(backend, flags)\n\nCreate a scan context.\n\nParameters\n\nbackend::String : A NULL-terminated string containing the backend(s) to use for scanning (example: pre version 0.20 : \"local\", \"ip\", or \"usb\"; post version 0.20 can handle multiple, including \"local:usb:\", \"ip:usb:\", \"local:usb:ip:\"). If NULL, all the available backends are used.\nflags::UInt32 : Unused for now. Set to 0.\n\nReturns\n\nOn success, a pointer to a iio_scan_context structure\nOn failure, NULL is returned and errno is set appropriately\n\nlibIIO documentation\n\n\n\n\n\n","category":"function"},{"location":"libiio/scan/#AdalmPluto.libIIO_jl.C_iio_scan_block_destroy-Tuple{Ptr{iio_scan_block}}","page":"scan.jl","title":"AdalmPluto.libIIO_jl.C_iio_scan_block_destroy","text":"C_iio_scan_block_destroy(scan_block)\n\nDestroy the given scan block.\n\nParameters\n\nblock::Ptr{iio_scan_block} : A pointer to an iio_scan_block structure\n\nNOTE\n\nAfter that function, the iio_scan_block pointer shall be invalid.\n\nIntroduced in version 0.20.\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/scan/#AdalmPluto.libIIO_jl.C_iio_scan_block_get_info-Tuple{Ptr{iio_scan_block},UInt32}","page":"scan.jl","title":"AdalmPluto.libIIO_jl.C_iio_scan_block_get_info","text":"C_iio_scan_block_get_info(scan_block, index)\n\nGet the iio_context_info for a particular context.\n\nParameters\n\nscan_block::Ptr{iio_scan_block} : A pointer to an iio_scan_block structure\nindex::UInt32 : The index corresponding to the context.\n\nReturns\n\nOn success, a pointer to the specified iio_context_info\nOn failure, NULL is returned and errno is set appropriately\n\nIntroduced in version 0.20.\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/scan/#AdalmPluto.libIIO_jl.C_iio_scan_block_scan-Tuple{Ptr{iio_scan_block}}","page":"scan.jl","title":"AdalmPluto.libIIO_jl.C_iio_scan_block_scan","text":"C_iio_scan_block_scan(scan_block)\n\nEnumerate available contexts via scan block.\n\nParameters\n\nscan_block::Ptr{iio_scan_block} : A pointer to a iio_scan_block structure.\n\nReturns\n\nOn success, the number of contexts found.\nOn failure, a negative error number.\n\nIntroduced in version 0.20.\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/scan/#AdalmPluto.libIIO_jl.C_iio_scan_context_destroy-Tuple{Ptr{iio_scan_context}}","page":"scan.jl","title":"AdalmPluto.libIIO_jl.C_iio_scan_context_destroy","text":"C_iio_scan_context_destroy(scan_context)\n\nDestroy the given scan context.\n\nParameters\n\nscan_context::Ptr{iio_scan_context} : A pointer to an iio_scan_context structure\n\nNOTE\n\nAfter that function, the iio_scan_context pointer shall be invalid.\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/scan/#AdalmPluto.libIIO_jl.C_iio_scan_context_get_info_list-Tuple{Ptr{iio_scan_context},Ref{Ptr{Ptr{iio_context_info}}}}","page":"scan.jl","title":"AdalmPluto.libIIO_jl.C_iio_scan_context_get_info_list","text":"C_iio_scan_context_get_info_list(scan_context, context_info)\n\nEnumerate available contexts.\n\nParameters\n\nscan_context::Ptr{iio_scan_context} : A pointer to an iio_scan_context structure\ncontext_info::Ref{Ptr{Ptr{iio_context_info}}} : A pointer to a const struct iio_context_info ** typed variable. The pointed variable will be initialized on success.\n\nReturns\n\nOn success, the number of contexts found.\nOn failure, a negative error number.\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/helpers/","page":"helpers.jl","title":"helpers.jl","text":"CurrentModule = libIIO_jl","category":"page"},{"location":"libiio/helpers/#helpers.jl","page":"helpers.jl","title":"helpers.jl","text":"","category":"section"},{"location":"libiio/helpers/","page":"helpers.jl","title":"helpers.jl","text":"Modules = [libIIO_jl]\nPages   = [\"helpers.md\"]","category":"page"},{"location":"libiio/helpers/","page":"helpers.jl","title":"helpers.jl","text":"Modules = [libIIO_jl]\nPages   = [\"libIIO/helpers.jl\"]","category":"page"},{"location":"libiio/helpers/#AdalmPluto.libIIO_jl.iio_decode_blocks-Tuple{Array{UInt8,N} where N,Int64}","page":"helpers.jl","title":"AdalmPluto.libIIO_jl.iio_decode_blocks","text":"iio_decode_blocks(buf, size)\n\nDecodes an array of blocks containing attributes values. Those come from iio_[target]_attr_read functions when C_NULL (\"\" for the julia wrapper) is passed as the attribute to read.\n\nArguments\n\nbuf::Array{UInt8} : an array containing the blocks returned by an IIO function.\nsize::Cssize_t    : the total size of the blocks in the array\n\nReturns\n\nAn array containing :\n\n(errno::Int, \"\") for attributes that cannot be read as a string, where errno is a negative error number.\n(size::Int, value::String) for attributes that can be read. Size is the size of the block and not the actual size of the value.\n\n\n\n\n\n","category":"method"},{"location":"libiio/helpers/#AdalmPluto.libIIO_jl.toString-Tuple{Array{UInt8,1}}","page":"helpers.jl","title":"AdalmPluto.libIIO_jl.toString","text":"toString(array)\n\nReturns a String from a Array{UInt8, 1}. Stops at the first \u0000 found if the byte string is null-terminated.\n\n\n\n\n\n","category":"method"},{"location":"libiio/helpers/#AdalmPluto.libIIO_jl.toggleNoAssertions","page":"helpers.jl","title":"AdalmPluto.libIIO_jl.toggleNoAssertions","text":"toggleNoAssertions([value])\n\nToggles the assertions in the libIIO_jl module.\n\nArguments\n\nvalue::Bool : an optional value to set the NO_ASSERT toggle to.\n\nReturns\n\nNO_ASSERT::Bool : the actual value of the NO_ASSERT toggle.\n\n\n\n\n\n","category":"function"},{"location":"libiio/buffer/","page":"buffer.jl","title":"buffer.jl","text":"CurrentModule = libIIO_jl","category":"page"},{"location":"libiio/buffer/#buffer.jl","page":"buffer.jl","title":"buffer.jl","text":"","category":"section"},{"location":"libiio/buffer/","page":"buffer.jl","title":"buffer.jl","text":"Modules = [libIIO_jl]\nPages   = [\"buffer.md\"]","category":"page"},{"location":"libiio/buffer/","page":"buffer.jl","title":"buffer.jl","text":"Modules = [libIIO_jl]\nPages   = [\"libIIO/buffer.jl\"]","category":"page"},{"location":"libiio/buffer/#AdalmPluto.libIIO_jl.C_iio_buffer_cancel-Tuple{Ptr{iio_buffer}}","page":"buffer.jl","title":"AdalmPluto.libIIO_jl.C_iio_buffer_cancel","text":"C_iio_buffer_cancel(buffer)\n\nCancel all buffer operations.\n\nParameters\n\nbuffer::Ptr{iio_buffer} :The buffer for which operations should be canceled\n\nThis function cancels all outstanding buffer operations previously scheduled. This means any pending iio_buffer_push() or iio_buffer_refill() operation will abort and return immediately, any further invocations of these functions on the same buffer will return immediately with an error.\n\nUsually iio_buffer_push() and iio_buffer_refill() will block until either all data has been transferred or a timeout occurs. This can depending on the configuration take a significant amount of time. iio_buffer_cancel() is useful to bypass these conditions if the buffer operation is supposed to be stopped in response to an external event (e.g. user input).\n\nTo be able to capture additional data after calling this function the buffer should be destroyed and then re-created.\n\nThis function can be called multiple times for the same buffer, but all but the first invocation will be without additional effect.\n\nThis function is thread-safe, but not signal-safe, i.e. it must not be called from a signal handler.\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/buffer/#AdalmPluto.libIIO_jl.C_iio_buffer_destroy-Tuple{Ptr{iio_buffer}}","page":"buffer.jl","title":"AdalmPluto.libIIO_jl.C_iio_buffer_destroy","text":"C_iio_buffer_destroy(buffer)\n\nDestroy the given buffer.\n\nParameters\n\nbuffer::Ptr{iio_buffer} : A pointer to an iio_buffer structure\n\nNOTE\n\nAfter that function, the iio_buffer pointer shall be invalid.\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/buffer/#AdalmPluto.libIIO_jl.C_iio_buffer_end-Tuple{Ptr{iio_buffer}}","page":"buffer.jl","title":"AdalmPluto.libIIO_jl.C_iio_buffer_end","text":"C_iio_buffer_end(buffer)\n\nGet the address that follows the last sample in a buffer.\n\nParameters\n\nbuffer::Ptr{iio_buffer} : A pointer to an iio_buffer structure\n\nReturns\n\nA pointer corresponding to the address that follows the last sample present in the buffer\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/buffer/#AdalmPluto.libIIO_jl.C_iio_buffer_first-Tuple{Ptr{iio_buffer},Ptr{iio_channel}}","page":"buffer.jl","title":"AdalmPluto.libIIO_jl.C_iio_buffer_first","text":"C_iio_buffer_first(buffer, channel)\n\nFind the first sample of a channel in a buffer.\n\nParameters\n\nbuffer::Ptr{iio_buffer} : A pointer to an iio_buffer structure\nchannel::Ptr{iio_channel} : A pointer to an iio_channel structure\n\nReturns\n\nA pointer to the first sample found, or to the end of the buffer if no sample for the given channel is present in the buffer\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/buffer/#AdalmPluto.libIIO_jl.C_iio_buffer_foreach_sample-Tuple{}","page":"buffer.jl","title":"AdalmPluto.libIIO_jl.C_iio_buffer_foreach_sample","text":"C_iio_buffer_foreach_sample()\n\nTHIS IS A PLACEHOLDER. THE DOCUMENTATION BELOW IS ONLY A COPY/PASTE OF THE C DOCUMENTATION.\n\nCall the supplied callback for each sample found in a buffer.\n\nParameters\n\nbuf : A pointer to an iio_buffer structure\ncallback : A pointer to a function to call for each sample found\ndata : A user-specified pointer that will be passed to the callback\n\nReturns\n\nnumber of bytes processed.\n\nNOTE\n\nThe callback receives four arguments:\n\nA pointer to the iio_channel structure corresponding to the sample,\nA pointer to the sample itself,\nThe length of the sample in bytes,\nThe user-specified pointer passed to iio_buffer_foreach_sample.\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/buffer/#AdalmPluto.libIIO_jl.C_iio_buffer_get_device-Tuple{Ptr{iio_buffer}}","page":"buffer.jl","title":"AdalmPluto.libIIO_jl.C_iio_buffer_get_device","text":"C_iio_buffer_get_device(buffer)\n\nRetrieve a pointer to the iio_device structure.\n\nParameters\n\nbuffer::Ptr{iio_buffer} : A pointer to an iio_buffer structure\n\nReturns\n\nA pointer to an iio_device structure\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/buffer/#AdalmPluto.libIIO_jl.C_iio_buffer_get_poll_fd-Tuple{Ptr{iio_buffer}}","page":"buffer.jl","title":"AdalmPluto.libIIO_jl.C_iio_buffer_get_poll_fd","text":"C_iio_buffer_get_poll_fd(buffer)\n\nGet a pollable file descriptor.\n\nCan be used to know when iio_buffer_refill() or iio_buffer_push() can be called\n\nParameters\n\nbuffer::Ptr{iio_buffer} : A pointer to an iio_buffer structure\n\nReturns\n\nOn success, valid file descriptor\nOn error, a negative errno code is returned\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/buffer/#AdalmPluto.libIIO_jl.C_iio_buffer_push-Tuple{Ptr{iio_buffer}}","page":"buffer.jl","title":"AdalmPluto.libIIO_jl.C_iio_buffer_push","text":"C_iio_buffer_push(buffer)\n\nSend the samples to the hardware.\n\nParameters\n\nbuffer::Ptr{iio_buffer} : A pointer to an iio_buffer structure\n\nReturns\n\nOn success, the number of bytes written is returned\nOn error, a negative errno code is returned\n\nNOTE\n\nOnly valid for output buffers\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/buffer/#AdalmPluto.libIIO_jl.C_iio_buffer_push_partial-Tuple{Ptr{iio_buffer},UInt64}","page":"buffer.jl","title":"AdalmPluto.libIIO_jl.C_iio_buffer_push_partial","text":"C_iio_buffer_push_partial(buffer, sample_count)\n\nSend a given number of samples to the hardware.\n\nParameters\n\nbuffer::Ptr{iio_buffer} : A pointer to an iio_buffer structure\nsamples_count::UInt : The number of samples to submit\n\nReturns\n\nOn success, the number of bytes written is returned\nOn error, a negative errno code is returned\n\nNOTE\n\nOnly valid for output buffers\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/buffer/#AdalmPluto.libIIO_jl.C_iio_buffer_refill-Tuple{Ptr{iio_buffer}}","page":"buffer.jl","title":"AdalmPluto.libIIO_jl.C_iio_buffer_refill","text":"C_iio_buffer_refill(buffer)\n\nFetch more samples from the hardware.\n\nParameters\n\nbuffer::Ptr{iio_buffer} : A pointer to an iio_buffer structure\n\nReturns\n\nOn success, the number of bytes read is returned\nOn error, a negative errno code is returned\n\nNOTE\n\nOnly valid for input buffers\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/buffer/#AdalmPluto.libIIO_jl.C_iio_buffer_set_blocking_mode-Tuple{Ptr{iio_buffer},Bool}","page":"buffer.jl","title":"AdalmPluto.libIIO_jl.C_iio_buffer_set_blocking_mode","text":"C_iio_buffer_set_blocking_mode(buffer, blocking)\n\nMake iio_buffer_refill() and iio_buffer_push() blocking or not.\n\nAfter this function has been called with blocking == false, iio_buffer_refill() and iio_buffer_push() will return -EAGAIN if no data is ready. A device is blocking by default.\n\nParameters\n\nbuffer::Ptr{iio_buffer} : A pointer to an iio_buffer structure\nblocking::Bool : true if the buffer API should be blocking, else false\n\nReturns\n\nOn success, 0\nOn error, a negative errno code is returned\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/buffer/#AdalmPluto.libIIO_jl.C_iio_buffer_start-Tuple{Ptr{iio_buffer}}","page":"buffer.jl","title":"AdalmPluto.libIIO_jl.C_iio_buffer_start","text":"C_iio_buffer_start(buffer)\n\nGet the start address of the buffer.\n\nParameters\n\nbuffer::Ptr{iio_buffer} : A pointer to an iio_buffer structure\n\nReturns\n\nA pointer corresponding to the start address of the buffer\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/buffer/#AdalmPluto.libIIO_jl.C_iio_buffer_step-Tuple{Ptr{iio_buffer}}","page":"buffer.jl","title":"AdalmPluto.libIIO_jl.C_iio_buffer_step","text":"C_iio_buffer_step(buffer)\n\nGet the step size between two samples of one channel.\n\nParameters\n\nbuffer::Ptr{iio_buffer} : A pointer to an iio_buffer structure\n\nReturns\n\nthe difference between the addresses of two consecutive samples of one same channel\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/buffer/#AdalmPluto.libIIO_jl.C_iio_device_create_buffer-Tuple{Ptr{iio_device},UInt64,Bool}","page":"buffer.jl","title":"AdalmPluto.libIIO_jl.C_iio_device_create_buffer","text":"C_iio_device_create_buffer(device, samples_count, cyclic)\n\nCreate an input or output buffer associated to the given device.\n\nParameters\n\ndevice::Ptr{iio_device}: A pointer to an iio_device structure\nsamples_count::UInt : The number of samples that the buffer should contain\ncyclic::Bool : If True, enable cyclic mode\n\nReturns\n\nOn success, a pointer to an iio_buffer structure\nOn error, if the assertions are enabled, throws an error.\nOn error, if the assertions are disabled, returns NULL.\n\nNOTE\n\nChannels that have to be written to / read from must be enabled before creating the buffer.\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/channel/","page":"channel.jl","title":"channel.jl","text":"CurrentModule = libIIO_jl","category":"page"},{"location":"libiio/channel/#channel.jl","page":"channel.jl","title":"channel.jl","text":"","category":"section"},{"location":"libiio/channel/","page":"channel.jl","title":"channel.jl","text":"Modules = [libIIO_jl]\nPages   = [\"channel.md\"]","category":"page"},{"location":"libiio/channel/","page":"channel.jl","title":"channel.jl","text":"Modules = [libIIO_jl]\nPages   = [\"libIIO/channel.jl\"]","category":"page"},{"location":"libiio/channel/#AdalmPluto.libIIO_jl.C_iio_channel_attr_get_filename-Tuple{Ptr{iio_channel},String}","page":"channel.jl","title":"AdalmPluto.libIIO_jl.C_iio_channel_attr_get_filename","text":"C_iio_channel_attr_get_filename(channel, attr)\n\nRetrieve the filename of an attribute.\n\nParameters\n\nchannel::Ptr{iio_channel} : A pointer to an iio_channel structure\nattr::String : a NULL-terminated string corresponding to the name of the attribute\n\nReturns\n\nOn success, a NULL-terminated string\nIf the attribute name is unknown, NULL is returned. If the assertions are enabled, throws an error instead.\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/channel/#AdalmPluto.libIIO_jl.C_iio_channel_attr_read-Tuple{Ptr{iio_channel},String}","page":"channel.jl","title":"AdalmPluto.libIIO_jl.C_iio_channel_attr_read","text":"C_iio_channel_attr_read(channel, attr)\n\nRead the content of the given channel-specific attribute.\n\nParameters\n\nchannel::Ptr{iio_channel} : A pointer to an iio_channel structure\nattr::String : a NULL-terminated string corresponding to the name of the attribute\n\nReturns\n\nOn success, (nbytes, value::String) where nbytes is the length of the value string.\nOn error, (errno, \"\") is returned, where errno is a negative error code.\nIf all the attributes are begin read, an array of the values above is returned.\n\nThe string may be shorter than the number of bytes returned as the conversion tirims excess null characters.\n\nNOTE\n\nBy passing NULL (replaced by an empty string in the Julia wrapper) as the \"attr\" argument to iio_channel_attr_read, it is now possible to read all of the attributes of a channel.\n\nThe buffer is filled with one block of data per attribute of the channel, by the order they appear in the iio_channel structure.\n\nThe first four bytes of one block correspond to a 32-bit signed value in network order. If negative, it corresponds to the errno code that were returned when reading the attribute; if positive, it corresponds to the length of the data read. In that case, the rest of the block contains the data.\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/channel/#AdalmPluto.libIIO_jl.C_iio_channel_attr_read_all-Tuple{}","page":"channel.jl","title":"AdalmPluto.libIIO_jl.C_iio_channel_attr_read_all","text":"C_iio_channel_attr_read_all()\n\nTHIS IS A PLACEHOLDER. THE DOCUMENTATION BELOW IS ONLY A COPY/PASTE OF THE C DOCUMENTATION.\n\nRead the content of all channel-specific attributes.\n\nParameters\n\nchn : A pointer to an iio_channel structure\ncb : A pointer to a callback function\ndata : A pointer that will be passed to the callback function\n\nReturns\n\nOn success, 0 is returned\nOn error, a negative errno code is returned\n\nNOTE\n\nThis function is especially useful when used with the network backend, as all the channel-specific attributes are read in one single command.\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/channel/#AdalmPluto.libIIO_jl.C_iio_channel_attr_read_bool-Tuple{Ptr{iio_channel},String}","page":"channel.jl","title":"AdalmPluto.libIIO_jl.C_iio_channel_attr_read_bool","text":"C_iio_channel_attr_read_bool(channel, attr)\n\nRead the content of the given channel-specific attribute.\n\nParameters\n\nchannel::Ptr{iio_channel} : A pointer to an iio_channel structure\nattr::String : a NULL-terminated string corresponding to the name of the attribute\n\nReturns\n\nOn success, (0, value::Bool) is returned\nOn error, (errno, false) is returned, where errno is a negative error code. The second value should be discarded.\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/channel/#AdalmPluto.libIIO_jl.C_iio_channel_attr_read_double-Tuple{Ptr{iio_channel},String}","page":"channel.jl","title":"AdalmPluto.libIIO_jl.C_iio_channel_attr_read_double","text":"C_iio_channel_attr_read_double(channel, attr)\n\nRead the content of the given channel-specific attribute.\n\nParameters\n\nchannel::Ptr{iio_channel} : A pointer to an iio_channel structure\nattr::String : a NULL-terminated string corresponding to the name of the attribute\n\nReturns\n\nOn success, (0, value::Float64) is returned\nOn error, (errno, 0) is returned, where errno is a negative error code. The second value should be discarded.\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/channel/#AdalmPluto.libIIO_jl.C_iio_channel_attr_read_longlong-Tuple{Ptr{iio_channel},String}","page":"channel.jl","title":"AdalmPluto.libIIO_jl.C_iio_channel_attr_read_longlong","text":"C_iio_channel_attr_read_longlong(channel, attr)\n\nRead the content of the given channel-specific attribute.\n\nParameters\n\nchannel::Ptr{iio_channel} : A pointer to an iio_channel structure\nattr::String : a NULL-terminated string corresponding to the name of the attribute\n\nReturns\n\nOn success, (0, value::Int64) is returned\nOn error, (errno, 0) is returned, where errno is a negative error code. The second value should be discarded.\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/channel/#AdalmPluto.libIIO_jl.C_iio_channel_attr_write-Tuple{Ptr{iio_channel},String,String}","page":"channel.jl","title":"AdalmPluto.libIIO_jl.C_iio_channel_attr_write","text":"C_iio_channel_attr_write(channel, attr, value)\n\nSet the value of the given channel-specific attribute.\n\nParameters\n\nchannel::Ptr{iio_channel} : A pointer to an iio_channel structure\nattr::String : a NULL-terminated string corresponding to the name of the attribute\nvalue::String : A NULL-terminated string to set the attribute to\n\nReturns\n\nOn success, the number of bytes written\nOn error, a negative errno code is returned\n\nNOTE\n\nBy passing NULL as the \"attr\" argument to iio_channel_attr_write, it is now possible to write all of the attributes of a channel.\n\nThe buffer must contain one block of data per attribute of the channel, by the order they appear in the iio_channel structure.\n\nThe first four bytes of one block correspond to a 32-bit signed value in network order. If negative, the attribute is not written; if positive, it corresponds to the length of the data to write. In that case, the rest of the block must contain the data.\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/channel/#AdalmPluto.libIIO_jl.C_iio_channel_attr_write_all-Tuple{}","page":"channel.jl","title":"AdalmPluto.libIIO_jl.C_iio_channel_attr_write_all","text":"C_iio_channel_attr_write_all()\n\nTHIS IS A PLACEHOLDER. THE DOCUMENTATION BELOW IS ONLY A COPY/PASTE OF THE C DOCUMENTATION.\n\nSet the values of all channel-specific attributes.\n\nParameters\n\nchn : A pointer to an iio_channel structure\ncb : A pointer to a callback function\ndata : A pointer that will be passed to the callback function\n\nReturns\n\nOn success, 0 is returned\nOn error, a negative errno code is returned\n\nNOTE\n\nThis function is especially useful when used with the network backend, as all the channel-specific attributes are written in one single command.\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/channel/#AdalmPluto.libIIO_jl.C_iio_channel_attr_write_bool-Tuple{Ptr{iio_channel},String,Bool}","page":"channel.jl","title":"AdalmPluto.libIIO_jl.C_iio_channel_attr_write_bool","text":"C_iio_channel_attr_write_bool(channel, attr, value)\n\nSet the value of the given channel-specific attribute.\n\nParameters\n\nchannel::Ptr{iio_channel} : A pointer to an iio_channel structure\nattr::String : a NULL-terminated string corresponding to the name of the attribute\nvalue::Bool : A bool value to set the attribute to\n\nReturns\n\nOn success, 0 is returned\nOn error, a negative errno code is returned\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/channel/#AdalmPluto.libIIO_jl.C_iio_channel_attr_write_double-Tuple{Ptr{iio_channel},String,Float64}","page":"channel.jl","title":"AdalmPluto.libIIO_jl.C_iio_channel_attr_write_double","text":"C_iio_channel_attr_write_double(channel, attr, value)\n\nSet the value of the given channel-specific attribute.\n\nParameters\n\nchannel::Ptr{iio_channel} : A pointer to an iio_channel structure\nattr::String : a NULL-terminated string corresponding to the name of the attribute\nvalue::Float64 : A double value to set the attribute to\n\nReturns\n\nOn success, 0 is returned\nOn error, a negative errno code is returned\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/channel/#AdalmPluto.libIIO_jl.C_iio_channel_attr_write_longlong-Tuple{Ptr{iio_channel},String,Int64}","page":"channel.jl","title":"AdalmPluto.libIIO_jl.C_iio_channel_attr_write_longlong","text":"C_iio_channel_attr_write_longlong(channel, attr, value)\n\nSet the value of the given channel-specific attribute.\n\nParameters\n\nchannel::Ptr{iio_channel} : A pointer to an iio_channel structure\nattr::String : a NULL-terminated string corresponding to the name of the attribute\nvalue::Int64 : A long long value to set the attribute to\n\nReturns\n\nOn success, 0 is returned\nOn error, a negative errno code is returned\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/channel/#AdalmPluto.libIIO_jl.C_iio_channel_attr_write_raw-Tuple{Ptr{iio_channel},String,Ptr{Nothing},UInt64}","page":"channel.jl","title":"AdalmPluto.libIIO_jl.C_iio_channel_attr_write_raw","text":"C_iio_channel_attr_write_raw(channel, attr, value)\n\nSet the value of the given channel-specific attribute.\n\nParameters\n\nchannel::Ptr{iio_channel} : A pointer to an iio_channel structure\nattr::String : a NULL-terminated string corresponding to the name of the attribute\nvalue::Ptr{Cvoid}       : A pointer to the data to be written\nsize::Csize_t           : The number of bytes to be written\n\nReturns\n\nOn success, the number of bytes written\nOn error, a negative errno code is returned\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/channel/#AdalmPluto.libIIO_jl.C_iio_channel_disable-Tuple{Ptr{iio_channel}}","page":"channel.jl","title":"AdalmPluto.libIIO_jl.C_iio_channel_disable","text":"C_iio_channel_disable(channel)\n\nDisable the given channel.\n\nParameters\n\nchannel::Ptr{iio_channel} : A pointer to an iio_channel structure\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/channel/#AdalmPluto.libIIO_jl.C_iio_channel_enable-Tuple{Ptr{iio_channel}}","page":"channel.jl","title":"AdalmPluto.libIIO_jl.C_iio_channel_enable","text":"C_iio_channel_enable(channel)\n\nEnable the given channel.\n\nParameters\n\nchannel::Ptr{iio_channel} : A pointer to an iio_channel structure\n\nNOTE\n\nBefore creating an iiobuffer structure with `iiodevicecreatebuffer`, it is required to enable at least one channel of the device to read from.\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/channel/#AdalmPluto.libIIO_jl.C_iio_channel_find_attr-Tuple{Ptr{iio_channel},String}","page":"channel.jl","title":"AdalmPluto.libIIO_jl.C_iio_channel_find_attr","text":"C_iio_channel_find_attr(channel, name)\n\nTry to find a channel-specific attribute by its name.\n\nParameters\n\nchannel::Ptr{iio_channel} : A pointer to an iio_channel structure\nname::String : A NULL-terminated string corresponding to the name of the attribute\n\nReturns\n\nOn success, a NULL-terminated string.\nOn failure, if the assertions are enabled, throws an error.\nOn failure, if the assertions are disabled, returns an empty string.\n\nNOTE\n\nThis function is useful to detect the presence of an attribute. It can also be used to retrieve the name of an attribute as a pointer to a static string from a dynamically allocated string.\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/channel/#AdalmPluto.libIIO_jl.C_iio_channel_get_attr-Tuple{Ptr{iio_channel},UInt32}","page":"channel.jl","title":"AdalmPluto.libIIO_jl.C_iio_channel_get_attr","text":"C_iio_channel_get_attr(channel, index)\n\nGet the channel-specific attribute present at the given index.\n\nParameters\n\nchannel::Ptr{iio_channel} : A pointer to an iio_channel structure\nindex::UInt32 : The index corresponding to the attribute\n\nReturns\n\nOn success, a NULL-terminated string.\nOn failure, if the assertions are enabled, throws an error.\nOn failure, if the assertions are disabled, returns an empty string.\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/channel/#AdalmPluto.libIIO_jl.C_iio_channel_get_attrs_count-Tuple{Ptr{iio_channel}}","page":"channel.jl","title":"AdalmPluto.libIIO_jl.C_iio_channel_get_attrs_count","text":"C_iio_channel_get_attrs_count(channel)\n\nEnumerate the channel-specific attributes of the given channel.\n\nParameters\n\nchannel::Ptr{iio_channel} : A pointer to an iio_channel structure\n\nReturns\n\nThe number of channel-specific attributes found\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/channel/#AdalmPluto.libIIO_jl.C_iio_channel_get_data-Tuple{Ptr{iio_channel}}","page":"channel.jl","title":"AdalmPluto.libIIO_jl.C_iio_channel_get_data","text":"C_iio_channel_get_data(channel)\n\nRetrieve a previously associated pointer of an iio_channel structure.\n\nParameters\n\nchannel::Ptr{iio_channel} : A pointer to an iio_channel structure\n\nReturns\n\nThe pointer previously associated if present, or NULL\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/channel/#AdalmPluto.libIIO_jl.C_iio_channel_get_device-Tuple{Ptr{iio_channel}}","page":"channel.jl","title":"AdalmPluto.libIIO_jl.C_iio_channel_get_device","text":"C_iio_channel_get_device(channel)\n\nRetrieve a pointer to the iio_device structure.\n\nParameters\n\nchannel::Ptr{iio_channel} : A pointer to an iio_channel structure\n\nReturns\n\nA pointer to an iio_device structure\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/channel/#AdalmPluto.libIIO_jl.C_iio_channel_get_id-Tuple{Ptr{iio_channel}}","page":"channel.jl","title":"AdalmPluto.libIIO_jl.C_iio_channel_get_id","text":"C_iio_channel_get_id(channel)\n\nRetrieve the channel ID (e.g. voltage0)\n\nParameters\n\nchannel::Ptr{iio_channel} : A pointer to an iio_channel structure\n\nReturns\n\nA NULL-terminated string\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/channel/#AdalmPluto.libIIO_jl.C_iio_channel_get_modifier-Tuple{Ptr{iio_channel}}","page":"channel.jl","title":"AdalmPluto.libIIO_jl.C_iio_channel_get_modifier","text":"C_iio_channel_get_modifier(channel)\n\nGet the modifier type of the given channel.\n\nParameters\n\nchannel::Ptr{iio_channel} : A pointer to an iio_channel structure\n\nReturns\n\nThe modifier type of the channel\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/channel/#AdalmPluto.libIIO_jl.C_iio_channel_get_name-Tuple{Ptr{iio_channel}}","page":"channel.jl","title":"AdalmPluto.libIIO_jl.C_iio_channel_get_name","text":"C_iio_channel_get_name(channel)\n\nRetrieve the channel name (e.g. vccint)\n\nParameters\n\nchannel::Ptr{iio_channel} : A pointer to an iio_channel structure\n\nReturns\n\nA NULL-terminated string.\n\nNOTE\n\nIf the channel has no name, and the assertions are enabled, throws an error. If the assertions are disabled, returns an empty string.\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/channel/#AdalmPluto.libIIO_jl.C_iio_channel_get_type-Tuple{Ptr{iio_channel}}","page":"channel.jl","title":"AdalmPluto.libIIO_jl.C_iio_channel_get_type","text":"C_iio_channel_get_type(channel)\n\nGet the type of the given channel.\n\nParameters\n\nchannel::Ptr{iio_channel} : A pointer to an iio_channel structure\n\nReturns\n\nThe type of the channel\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/channel/#AdalmPluto.libIIO_jl.C_iio_channel_is_enabled-Tuple{Ptr{iio_channel}}","page":"channel.jl","title":"AdalmPluto.libIIO_jl.C_iio_channel_is_enabled","text":"C_iio_channel_is_enabled(channel)\n\nParameters\n\nchannel::Ptr{iio_channel} : A pointer to an iio_channel structure\n\nReturns\n\nTrue if the channel is enabled, False otherwise\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/channel/#AdalmPluto.libIIO_jl.C_iio_channel_is_output-Tuple{Ptr{iio_channel}}","page":"channel.jl","title":"AdalmPluto.libIIO_jl.C_iio_channel_is_output","text":"C_iio_channel_is_output(channel)\n\nReturn True if the given channel is an output channel.\n\nParameters\n\nchannel::Ptr{iio_channel} : A pointer to an iio_channel structure\n\nReturns\n\nTrue if the channel is an output channel, False otherwise\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/channel/#AdalmPluto.libIIO_jl.C_iio_channel_is_scan_element-Tuple{Ptr{iio_channel}}","page":"channel.jl","title":"AdalmPluto.libIIO_jl.C_iio_channel_is_scan_element","text":"C_iio_channel_is_scan_element(channel)\n\nReturn True if the given channel is a scan element.\n\nParameters\n\nchannel::Ptr{iio_channel} : A pointer to an iio_channel structure\n\nReturns\n\nTrue if the channel is a scan element, False otherwise\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/channel/#AdalmPluto.libIIO_jl.C_iio_channel_read!-Tuple{Ptr{iio_channel},Ptr{iio_buffer},Array{UInt8,N} where N}","page":"channel.jl","title":"AdalmPluto.libIIO_jl.C_iio_channel_read!","text":"C_iio_channel_read!(chn, buf, dst)\n\nDemultiplex and convert the samples of a given channel.\n\nParameters\n\nchn::Ptr{iio_channel} : A pointer to an iio_channel structure\nbuf::Ptr{iio_buffer} : A pointer to an iio_buffer structure\ndst::Array{UInt8} : An array where the converted data will be stored\n\nReturns\n\nThe size of the converted data written is dst, in bytes\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/channel/#AdalmPluto.libIIO_jl.C_iio_channel_read_raw-Tuple{}","page":"channel.jl","title":"AdalmPluto.libIIO_jl.C_iio_channel_read_raw","text":"C_iio_channel_read_raw()\n\nTHIS IS A PLACEHOLDER. THE DOCUMENTATION BELOW IS ONLY A COPY/PASTE OF THE C DOCUMENTATION.\n\nDemultiplex the samples of a given channel.\n\nParameters\n\nchn : A pointer to an iio_channel structure\nbuffer : A pointer to an iio_buffer structure\ndst : A pointer to the memory area where the demultiplexed data will be stored\nlen : The available length of the memory area, in bytes\n\nReturns\n\nThe size of the demultiplexed data, in bytes\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/channel/#AdalmPluto.libIIO_jl.C_iio_channel_set_data-Tuple{Ptr{iio_channel},Ptr{Nothing}}","page":"channel.jl","title":"AdalmPluto.libIIO_jl.C_iio_channel_set_data","text":"C_iio_channel_set_data(channel, data)\n\nAssociate a pointer to an iio_channel structure. If the pointer is a Julia pointer, you need to protect the data from the GC.\n\nSee the Julia Documentation and GC.@preserve.\n\nParameters\n\nchannel::Ptr{iio_channel} : A pointer to an iio_channel structure\ndata::Ptr{Cvoid}          : The pointer to be associated.\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/channel/#AdalmPluto.libIIO_jl.C_iio_channel_write-Tuple{}","page":"channel.jl","title":"AdalmPluto.libIIO_jl.C_iio_channel_write","text":"C_iio_channel_write()\n\nTHIS IS A PLACEHOLDER. THE DOCUMENTATION BELOW IS ONLY A COPY/PASTE OF THE C DOCUMENTATION.\n\nConvert and multiplex the samples of a given channel.\n\nParameters\n\nchn : A pointer to an iio_channel structure\nbuffer : A pointer to an iio_buffer structure\nsrc : A pointer to the memory area where the sequential data will be read from\nlen : The length of the memory area, in bytes\n\nReturns\n\nThe number of bytes actually converted and multiplexed\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/channel/#AdalmPluto.libIIO_jl.C_iio_channel_write_raw-Tuple{}","page":"channel.jl","title":"AdalmPluto.libIIO_jl.C_iio_channel_write_raw","text":"C_iio_channel_write_raw()\n\nTHIS IS A PLACEHOLDER. THE DOCUMENTATION BELOW IS ONLY A COPY/PASTE OF THE C DOCUMENTATION.\n\nMultiplex the samples of a given channel.\n\nParameters\n\nchn : A pointer to an iio_channel structure\nbuffer : A pointer to an iio_buffer structure\nsrc : A pointer to the memory area where the sequential data will be read from\nlen : The length of the memory area, in bytes\n\nReturns\n\nThe number of bytes actually multiplexed\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/toplevel/","page":"toplevel.jl","title":"toplevel.jl","text":"CurrentModule = libIIO_jl","category":"page"},{"location":"libiio/toplevel/#toplevel.jl","page":"toplevel.jl","title":"toplevel.jl","text":"","category":"section"},{"location":"libiio/toplevel/","page":"toplevel.jl","title":"toplevel.jl","text":"Modules = [libIIO_jl]\nPages   = [\"toplevel.md\"]","category":"page"},{"location":"libiio/toplevel/","page":"toplevel.jl","title":"toplevel.jl","text":"Modules = [libIIO_jl]\nPages   = [\"libIIO/toplevel.jl\"]","category":"page"},{"location":"libiio/toplevel/#AdalmPluto.libIIO_jl.C_iio_get_backend-Tuple{UInt32}","page":"toplevel.jl","title":"AdalmPluto.libIIO_jl.C_iio_get_backend","text":"C_iio_get_backend(index)\n\nRetrieve the name of a given backend.\n\nParameters\n\nindex::UInt32 : The index corresponding to the attribute\n\nReturns\n\nOn success, a NULL-terminated string\nIf the index is invalid, an empty string is returned\n\nIntroduced in version 0.9.\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/toplevel/#AdalmPluto.libIIO_jl.C_iio_get_backends_count-Tuple{}","page":"toplevel.jl","title":"AdalmPluto.libIIO_jl.C_iio_get_backends_count","text":"C_iio_get_backends_count()\n\nGet the number of available backends.\n\nReturns\n\nThe number of available backends\n\nIntroduced in version 0.9.\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/toplevel/#AdalmPluto.libIIO_jl.C_iio_has_backend-Tuple{String}","page":"toplevel.jl","title":"AdalmPluto.libIIO_jl.C_iio_has_backend","text":"C_iio_has_backend(backend)\n\nCheck if the specified backend is available.\n\nParameters\n\nbackend::String : The name of the backend to query\n\nReturns\n\nTrue if the backend is available, false otherwise\n\nIntroduced in version 0.9.\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/toplevel/#AdalmPluto.libIIO_jl.C_iio_library_get_version-Tuple{}","page":"toplevel.jl","title":"AdalmPluto.libIIO_jl.C_iio_library_get_version","text":"C_iio_library_get_version()\n\nGet the version of the libiio library.\n\nReturns\n\nmajor::Int : The major version\nminor::Int : The minor version\ngit_tag::String : The git tag\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/toplevel/#AdalmPluto.libIIO_jl.C_iio_strerror-Tuple{Int64}","page":"toplevel.jl","title":"AdalmPluto.libIIO_jl.C_iio_strerror","text":"C_iio_strerror(error)\n\nGet a string description of an error code.\n\nParameters\n\nerror::Int : The error code\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/context/","page":"context.jl","title":"context.jl","text":"CurrentModule = libIIO_jl","category":"page"},{"location":"libiio/context/#context.jl","page":"context.jl","title":"context.jl","text":"","category":"section"},{"location":"libiio/context/","page":"context.jl","title":"context.jl","text":"Modules = [libIIO_jl]\nPages   = [\"context.md\"]","category":"page"},{"location":"libiio/context/","page":"context.jl","title":"context.jl","text":"Modules = [libIIO_jl]\nPages   = [\"libIIO/context.jl\"]","category":"page"},{"location":"libiio/context/#AdalmPluto.libIIO_jl.C_iio_context_clone-Tuple{Ptr{iio_context}}","page":"context.jl","title":"AdalmPluto.libIIO_jl.C_iio_context_clone","text":"C_iio_context_clone(context)\n\nDuplicate a pre-existing IIO context.\n\nParameters\n\ncontext::Ptr{iio_context} : A pointer to an iio_context structure\n\nReturns\n\nOn success, A pointer to an iio_context structure\nOn failure, throws an error if the assertions are enabled, or NULL otherwise.\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/context/#AdalmPluto.libIIO_jl.C_iio_context_destroy-Tuple{Ptr{iio_context}}","page":"context.jl","title":"AdalmPluto.libIIO_jl.C_iio_context_destroy","text":"C_iio_context_destroy(context)\n\nDestroy the given context.\n\nParameters\n\ncontext::Ptr{iio_context} : A pointer to an iio_context structure\n\nNOTE\n\nAfter that function, the iio_context pointer shall be invalid.\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/context/#AdalmPluto.libIIO_jl.C_iio_context_find_device-Tuple{Ptr{iio_context},String}","page":"context.jl","title":"AdalmPluto.libIIO_jl.C_iio_context_find_device","text":"C_iio_context_find_device(context, name)\n\nTry to find a device structure by its name of ID.\n\nParameters\n\ncontext::Ptr{iio_context} : A pointer to an iio_context structure\nname::String : A NULL-terminated string corresponding to the name or the ID of the device to search for\n\nReturns\n\nOn success, a pointer to an iio_device structure\nIf the name or ID does not correspond to any known device, an error is thrown if the assertions are enabled, or NULL otherwise.\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/context/#AdalmPluto.libIIO_jl.C_iio_context_get_attr-Tuple{Ptr{iio_context},UInt32}","page":"context.jl","title":"AdalmPluto.libIIO_jl.C_iio_context_get_attr","text":"C_iio_context_get_attr(context, index)\n\nRetrieve the name and value of a context-specific attribute.\n\nParameters\n\ncontext::Ptr{iio_context} : A pointer to an iio_context structure\nindex::UInt32 : The index corresponding to the attribute\n\nReturns\n\nOn success, (0, name::String, value::String) is returned.\nOn error, (errno, \"\", \"\") is returned, where errno is a negative code.\n\nIntroduced in version 0.9.\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/context/#AdalmPluto.libIIO_jl.C_iio_context_get_attr_value-Tuple{Ptr{iio_context},String}","page":"context.jl","title":"AdalmPluto.libIIO_jl.C_iio_context_get_attr_value","text":"C_iio_context_get_attr_value(context, name)\n\nRetrieve the value of a context-specific attribute.\n\nParameters\n\ncontext::Ptr{iio_context} : A pointer to an iio_context structure\nname::String : The name of the context attribute to read\n\nReturns\n\nOn success, a NULL-terminated string.\nIf the name does not correspond to any attribute and the assertions are enabled, throws an error.\nIf the name does not correspond to any attribute and the assertions are disabled, returns an empty string.\n\nIntroduced in version 0.9.\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/context/#AdalmPluto.libIIO_jl.C_iio_context_get_attrs_count-Tuple{Ptr{iio_context}}","page":"context.jl","title":"AdalmPluto.libIIO_jl.C_iio_context_get_attrs_count","text":"C_iio_context_get_attrs_count(context)\n\nGet the number of context-specific attributes.\n\nParameters\n\ncontext::Ptr{iio_context} : A pointer to an iio_context structure\n\nReturns\n\nThe number of context-specific attributes\n\nIntroduced in version 0.9.\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/context/#AdalmPluto.libIIO_jl.C_iio_context_get_description-Tuple{Ptr{iio_context}}","page":"context.jl","title":"AdalmPluto.libIIO_jl.C_iio_context_get_description","text":"C_iio_context_get_description(context)\n\nGet a description of the given context.\n\nParameters\n\ncontext::Ptr{iio_context} : A pointer to an iio_context structure\n\nReturns\n\nA NULL-terminated string\n\nNOTE\n\nThe returned string will contain human-readable information about the current context.\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/context/#AdalmPluto.libIIO_jl.C_iio_context_get_device-Tuple{Ptr{iio_context},UInt32}","page":"context.jl","title":"AdalmPluto.libIIO_jl.C_iio_context_get_device","text":"C_iio_context_get_device(context, index)\n\nGet the device present at the given index.\n\nParameters\n\ncontext::Ptr{iio_context} : A pointer to an iio_context structure\nindex::UInt32 : The index corresponding to the device\n\nReturns\n\nOn success, a pointer to an iio_device structure\nIf the index is invalid and the assertions are enabled, an error is thrown.\nIf the index is invalid and the assertions are disabled, NULL is returned.\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/context/#AdalmPluto.libIIO_jl.C_iio_context_get_devices_count-Tuple{Ptr{iio_context}}","page":"context.jl","title":"AdalmPluto.libIIO_jl.C_iio_context_get_devices_count","text":"C_iio_context_get_devices_count(context)\n\nEnumerate the devices found in the given context.\n\nParameters\n\ncontext::Ptr{iio_context} : A pointer to an iio_context structure\n\nReturns\n\nThe number of devices found\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/context/#AdalmPluto.libIIO_jl.C_iio_context_get_name-Tuple{Ptr{iio_context}}","page":"context.jl","title":"AdalmPluto.libIIO_jl.C_iio_context_get_name","text":"C_iio_context_get_name(context)\n\nGet the name of the given context.\n\nParameters\n\ncontext::Ptr{iio_context} : A pointer to an iio_context structure\n\nReturns\n\nA NULL-terminated string\n\nNOTE\n\nThe returned string will be local, xml or network when the context has been created with the local, xml and network backends respectively.\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/context/#AdalmPluto.libIIO_jl.C_iio_context_get_version-Tuple{Ptr{iio_context}}","page":"context.jl","title":"AdalmPluto.libIIO_jl.C_iio_context_get_version","text":"C_iio_context_get_version(context)\n\nGet the version of the backend in use.\n\nParameters\n\ncontext::Ptr{iio_context} : A pointer to an iio_context structure\n\nReturns\n\nret::Int : 0 if no errors, negative error code otherwise\nmajor::Int : The major version\nminor::Int : The minor version\ngit_tag::String : The git tag\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/context/#AdalmPluto.libIIO_jl.C_iio_context_get_xml-Tuple{Ptr{iio_context}}","page":"context.jl","title":"AdalmPluto.libIIO_jl.C_iio_context_get_xml","text":"C_iio_context_get_xml(context)\n\nObtain a XML representation of the given context.\n\nParameters\n\ncontext::Ptr{iio_context} : A pointer to an iio_context structure\n\nReturns\n\nA NULL-terminated string\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/context/#AdalmPluto.libIIO_jl.C_iio_context_set_timeout-Tuple{Ptr{iio_context},UInt32}","page":"context.jl","title":"AdalmPluto.libIIO_jl.C_iio_context_set_timeout","text":"C_iio_context_set_timeout(context, timeout_ms)\n\nSet a timeout for I/O operations.\n\nParameters\n\ncontext::Ptr{iio_context} : A pointer to an iio_context structure\ntimeout_ms::UInt32 : A positive integer representing the time in milliseconds after which a timeout occurs. A value of 0 is used to specify that no timeout should occur.\n\nReturns\n\nOn success, 0 is returned\nOn error, a negative errno code is returned\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/context/#AdalmPluto.libIIO_jl.C_iio_create_context_from_uri-Tuple{String}","page":"context.jl","title":"AdalmPluto.libIIO_jl.C_iio_create_context_from_uri","text":"C_iio_create_context_from_uri(uri)\n\nCreate a context from a URI description.\n\nParameters\n\nuri::String : A URI describing the context location\n\nReturns\n\nOn success, a pointer to a iio_context structure\nOn failure, if the assertions are enabled, an error is thrown.\nOn failure, if the assertions are disabled, NULL is returned.\n\nNOTE\n\nThe following URIs are supported based on compile time backend support:\n\nLocal backend, \"local:\":   Does not have an address part. For example \"local:\"\nXML backend, \"xml:\"   Requires a path to the XML file for the address part. For example \"xml:/home/user/file.xml\"\nNetwork backend, \"ip:\"   Requires a hostname, IPv4, or IPv6 to connect to a specific running IIO Daemon or no address part for automatic discovery when library is compiled with ZeroConf support. For example \"ip:192.168.2.1\", or \"ip:localhost\", or \"ip:\" or \"ip:plutosdr.local\"\nUSB backend, \"usb:\"   When more than one usb device is attached, requires bus, address, and interface parts separated with a dot. For example \"usb:3.32.5\". Where there is only one USB device attached, the shorthand \"usb:\" can be used.\nSerial backend, \"serial:\" requires :\na port (/dev/ttyUSB0),\nbaud_rate (default 115200)\nserial port configuration\ndata bits (5 6 7 8 9)\nparity ('n' none, 'o' odd, 'e' even, 'm' mark, 's' space)\nstop bits (1 2)\nflow control ('\u0000' none, 'x' Xon Xoff, 'r' RTSCTS, 'd' DTRDSR)\nFor example \"serial:/dev/ttyUSB0,115200\" or \"serial:/dev/ttyUSB0,115200,8n1\"\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/context/#AdalmPluto.libIIO_jl.C_iio_create_default_context-Tuple{}","page":"context.jl","title":"AdalmPluto.libIIO_jl.C_iio_create_default_context","text":"C_iio_create_default_context()\n\nCreate a context from local or remote IIO devices.\n\nReturns\n\nOn success, A pointer to an iio_context structure\nOn failure, if the assertions are enabled, an error is thrown\nOn failure, if the assertions are disabled, NULL is returned\n\nNOTE\n\nThis function will create a network context if the IIOD_REMOTE environment variable is set to the hostname where the IIOD server runs. If set to an empty string, the server will be discovered using ZeroConf. If the environment variable is not set, a local context will be created instead.\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/context/#AdalmPluto.libIIO_jl.C_iio_create_local_context-Tuple{}","page":"context.jl","title":"AdalmPluto.libIIO_jl.C_iio_create_local_context","text":"C_iio_create_local_context()\n\nCreate a context from local IIO devices (Linux only)\n\nReturns\n\nOn success, A pointer to an iio_context structure\nOn failure, if the assertions are enabled, an error is thrown.\nOn failure, if the assertions are disabled, NULL is returned.\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/context/#AdalmPluto.libIIO_jl.C_iio_create_network_context-Tuple{String}","page":"context.jl","title":"AdalmPluto.libIIO_jl.C_iio_create_network_context","text":"C_iio_create_network_context(host)\n\nCreate a context from the network.\n\nParameters\n\nhost::String : Hostname, IPv4 or IPv6 address where the IIO Daemon is running\n\nReturns\n\nOn success, A pointer to an iio_context structure\nOn failure, if the assertions are enabled, an error is thrown.\nOn failure, if the assertions are disabled, NULL is returned.\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/context/#AdalmPluto.libIIO_jl.C_iio_create_xml_context-Tuple{String}","page":"context.jl","title":"AdalmPluto.libIIO_jl.C_iio_create_xml_context","text":"C_iio_create_xml_context(xml_file)\n\nCreate a context from a XML file.\n\nParameters\n\nxml_file::String : Path to the XML file to open\n\nReturns\n\nOn success, A pointer to an iio_context structure\nOn failure, if the assertions are enabled, an error is thrown.\nOn failure, if the assertions are disabled, NULL is returned.\n\nNOTE\n\nThe format of the XML must comply to the one returned by iio_context_get_xml.\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/context/#AdalmPluto.libIIO_jl.C_iio_create_xml_context_mem-Tuple{String,UInt64}","page":"context.jl","title":"AdalmPluto.libIIO_jl.C_iio_create_xml_context_mem","text":"C_iio_create_xml_context_mem(xml, length)\n\nCreate a context from XML data in memory.\n\nParameters\n\nxml::String : Pointer to the XML data in memory\nlength::UInt : Length of the XML string in memory (excluding the final \u0000)\n\nReturns\n\nOn success, A pointer to an iio_context structure\nOn failure, if the assertions are enabled, an error is thrown.\nOn failure, if the assertions are disabled, NULL is returned.\n\nNOTE\n\nThe format of the XML must comply to the one returned by iio_context_get_xml\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/debug/","page":"debug.jl","title":"debug.jl","text":"CurrentModule = libIIO_jl","category":"page"},{"location":"libiio/debug/#debug.jl","page":"debug.jl","title":"debug.jl","text":"","category":"section"},{"location":"libiio/debug/","page":"debug.jl","title":"debug.jl","text":"Modules = [libIIO_jl]\nPages   = [\"debug.md\"]","category":"page"},{"location":"libiio/debug/","page":"debug.jl","title":"debug.jl","text":"Modules = [libIIO_jl]\nPages   = [\"libIIO/debug.jl\"]","category":"page"},{"location":"libiio/debug/#AdalmPluto.libIIO_jl.C_iio_device_get_sample_size-Tuple{Ptr{iio_device}}","page":"debug.jl","title":"AdalmPluto.libIIO_jl.C_iio_device_get_sample_size","text":"C_iio_device_get_sample_size(device)\n\nGet the current sample size.\n\nParameters\n\ndevice::Ptr{iio_device} : A pointer to an iio_device structure\n\nReturns\n\nOn success, the sample size in bytes\nOn error, a negative errno code is returned\n\nNOTE\n\nThe sample size is not constant and will change when channels get enabled or disabled.\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/debug/#AdalmPluto.libIIO_jl.C_iio_device_identify_filename-Tuple{Ptr{iio_device},String}","page":"debug.jl","title":"AdalmPluto.libIIO_jl.C_iio_device_identify_filename","text":"C_iio_device_identify_filename(device, filename)\n\nIdentify the channel or debug attribute corresponding to a filename.\n\nParameters\n\ndevice::Ptr{iio_device} : A pointer to an iio_device structure\nfilename::String : A NULL-terminated string corresponding to the filename\n\nReturns\n\nOn success, (0, channel::Ptr{iio_channel}, attribute::String) is returned.\nOn error, (errno, NULL, \"\") is returned, where errno is a negative error code.\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"adalmpluto/","page":"AdalmPluto","title":"AdalmPluto","text":"CurrentModule = AdalmPluto","category":"page"},{"location":"adalmpluto/#AdalmPluto","page":"AdalmPluto","title":"AdalmPluto","text":"","category":"section"},{"location":"adalmpluto/","page":"AdalmPluto","title":"AdalmPluto","text":"Modules = [AdalmPluto]\nPages   = [\"adalmpluto.md\"]","category":"page"},{"location":"adalmpluto/#Public-functions-and-types-exported-from-AdalmPluto","page":"AdalmPluto","title":"Public functions and types exported from AdalmPluto","text":"","category":"section"},{"location":"adalmpluto/","page":"AdalmPluto","title":"AdalmPluto","text":"Modules = [AdalmPluto]\nPrivate = false","category":"page"},{"location":"adalmpluto/#AdalmPluto.PlutoSDR","page":"AdalmPluto","title":"AdalmPluto.PlutoSDR","text":"PlutoSDR\n+-- ctx::Ptr{iio_context}\n|\n+-- tx::PlutoTx\n|   |\n|   +-- iio::txWrapper\n|   |   |\n|   |   +-- tx::Ptr{iio_device};\n|   |   +-- tx0_i::Ptr{iio_channel};\n|   |   +-- tx0_q::Ptr{iio_channel};\n|   |   +-- chn::Ptr{iio_channel};\n|   |   +-- chn_lo::Ptr{iio_channel};\n|   |\n|   +-- cfg::ChannelCfg\n|   |   |\n|   |   +-- rfport::String;\n|   |   +-- bandwidth::Int64;\n|   |   +-- samplingRate::Int64;\n|   |   +-- carrierFreq::Int64;\n|   |\n|   +-- buf::IIO_Buffer\n|   |   |\n|   |   +-- C_ptr::Ptr{iio_buffer};         |< Pointer to the C buffer\n|   |   +-- C_size::Csize_t;                |< Size of the C buffer in samples\n|   |   +-- C_sample_size::Cssize_t;        |< Size of a sample in the C buffer\n|   |   +-- C_first::Ptr{Cuchar};           |< Pointer to the first sample in the C buffer\n|   |   +-- C_last::Ptr{Cuchar};            |< Pointer to the last sample in the C buffer\n|   |   +-- C_step::Cssize_t;               |< Distance between to sample pointers in the C buffer\n|   |   +-- i_raw_samples::Array{UInt8}     |< Temporary buffer to store I bytes\n|   |   +-- q_raw_samples::Array{UInt8}     |< Temporary buffer to store Q bytes\n|   |   +-- samples::Array{ComplexF32}      |< Samples stored in a Julia array\n|   |   +-- nb_samples::Int                 |< Number of samples in the Julia array\n|   |\n|   +-- effectiveSamplingRate::Float64\n|   +-- effectiveCarrierFreq::Float64\n|   +-- released::Bool\n|\n+-- rx::PlutoRx\n|   |\n|   +-- iio::rxWrapper\n|   |   +-- rx::Ptr{iio_device};\n|   |   +-- rx0_i::Ptr{iio_channel};\n|   |   +-- rx0_q::Ptr{iio_channel};\n|   |   +-- chn::Ptr{iio_channel};\n|   |   +-- chn_lo::Ptr{iio_channel};\n|   |\n|   +-- cfg::ChannelCfg\n|   |   |\n|   |   +-- rfport::String;\n|   |   +-- bandwidth::Int64;\n|   |   +-- samplingRate::Int64;\n|   |   +-- carrierFreq::Int64;\n|   |\n|   +-- buf::IIO_Buffer\n|   |   |\n|   |   +-- C_ptr::Ptr{iio_buffer};         |< Pointer to the C buffer\n|   |   +-- C_size::Csize_t;                |< Size of the C buffer in samples\n|   |   +-- C_sample_size::Cssize_t;        |< Size of a sample in the C buffer\n|   |   +-- C_first::Ptr{Cuchar};           |< Pointer to the first sample in the C buffer\n|   |   +-- C_last::Ptr{Cuchar};            |< Pointer to the last sample in the C buffer\n|   |   +-- C_step::Cssize_t;               |< Distance between to sample pointers in the C buffer\n|   |   +-- i_raw_samples::Array{UInt8}     |< Temporary buffer to store I bytes\n|   |   +-- q_raw_samples::Array{UInt8}     |< Temporary buffer to store Q bytes\n|   |   +-- samples::Array{ComplexF32}      |< Samples decoded and stored in a Julia array\n|   |   +-- nb_samples::Int                 |< Number of samples available in the Julia array\n|   |\n|   +-- effectiveSamplingRate::Float64\n|   +-- effectiveCarrierFreq::Float64\n|   +-- released::Bool\n|\n+-- released::Bool\n\n\n\n\n\n","category":"type"},{"location":"adalmpluto/#AdalmPluto.getGain-Tuple{PlutoSDR}","page":"AdalmPluto","title":"AdalmPluto.getGain","text":"getGain(pluto)\n\nReturns the gain value \n\nArguments\n\npluto::PlutoSDR : the radio to modify.\n\nReturns\n\ngain :Current radio gain \n\n\n\n\n\n","category":"method"},{"location":"adalmpluto/#AdalmPluto.openPluto","page":"AdalmPluto","title":"AdalmPluto.openPluto","text":"openPluto(carrierFreq, samplingRate, bandwidth[, uri, backend])\n\nCreates a PlutoSDR struct and configures the radio to stream the samples.\n\nArguments\n\ncarrierFreq::Int : the carrier frequency for both tx and rx.\nsamplingRate::Int : the sampling rate for both tx and rx.\ngain::Int : the analog RX gain.\n\nKeywords\n\naddr::String=\"auto\" : the radio address (ex: \"usb:1.3.5\"). \"auto\" takes the first uri found for the given backend.\nbackend::String=\"usb\" : the backend to scan for the auto uri.\nbufferSize::UInt=1024*1024 : the buffer size in samples.\nbandwidth::Int : the bandwidth for both tx and rx.\n\nReturns\n\nradio::PlutoSDR : a fully initialized PlutoSDR structure.\n\n\n\n\n\n","category":"function"},{"location":"adalmpluto/#AdalmPluto.openPluto-2","page":"AdalmPluto","title":"AdalmPluto.openPluto","text":"openPluto(txCfg, rxCfg[, uri, backend])\n\nCreates a PlutoSDR struct and configures the radio to stream the samples.\n\nArguments\n\ntxCfg::ChannelCfg : the port / bandwidth / sampling rate / carrier frequency for the tx channels.\nrxCfg::ChannelCfg : the port / bandwidth / sampling rate / carrier frequency for the rx channels.\nbufferSize::UInt=1024*1024 : the buffer size in samples.\nuri::String=\"auto\" : the radio uri (ex : \"usb:1.3.5\"). \"auto\" takes the first uri found for the given backend.\nbackend::String=\"usb\" : the backend to scan for the auto uri.\n\nReturns\n\nradio::PlutoSDR : a fully initialized PlutoSDR structure.\n\n\n\n\n\n","category":"function"},{"location":"adalmpluto/#AdalmPluto.recv!-Tuple{Array{Complex{Float32},N} where N,PlutoSDR}","page":"AdalmPluto","title":"AdalmPluto.recv!","text":"recv!(sig, pluto)\n\nFills the sig input buffer with samples from the Julia buffer. If there are not enough samples in the Julia buffer, it is refilled until sig is full. Returns the number of samples filled or a negative error number.\n\nArguments\n\nsig::Array{ComplexF32} : the buffer to be filled.\npluto::PlutoSDR : the radio to read the samples from.\n\n\n\n\n\n","category":"method"},{"location":"adalmpluto/#AdalmPluto.recv-Tuple{PlutoSDR,Int64}","page":"AdalmPluto","title":"AdalmPluto.recv","text":"recv(pluto, nbSamples)\n\nReads nbSamples from the Julia buffer. If there are less than nbSamples samples in the Julia buffer, the remaining samples are read, the buffer is refilled, and a total of the nbSamples is read. Returns a newly allocated Array{ComplexF32}.\n\nArguments\n\npluto::PlutoSDR : the radio to get receive the samples from.\nnbSamples::Int : the number of samples to receive.\n\nReturns\n\nbuffer::Array{ComplexF32} : an array with nbSamples complex values.\n\n\n\n\n\n","category":"method"},{"location":"adalmpluto/#AdalmPluto.refillJuliaBufferRX-Tuple{PlutoSDR}","page":"AdalmPluto","title":"AdalmPluto.refillJuliaBufferRX","text":"refillJuliaBufferRX(pluto)\n\nRefills the radio buffer, decode the samples into ComplexF32 values, and store those values in the pluto structure. To access those samples : pluto.rx.buf.samples.\n\nArguments\n\npluto::PlutoSDR : the radio to receive the samples from, and the structure storing those samples.\n\nReturns\n\nnbSamples::Int : the number of samples stored into the Julia buffer.\n\n\n\n\n\n","category":"method"},{"location":"adalmpluto/#AdalmPluto.send-Tuple{PlutoSDR,Any}","page":"AdalmPluto","title":"AdalmPluto.send","text":"send(pluto,buffer;repeat=false) Send the buffer buffer with the Pluto device. If flag is set to true, repeat the transmission indefinively. If useinternalbuffer is set to true, the buffer used is the one already stored in the Pluto device (it saves buffer re-alloc)\n\n\n\n\n\n","category":"method"},{"location":"adalmpluto/#AdalmPluto.updateBandwidth!-Tuple{Any,Int64}","page":"AdalmPluto","title":"AdalmPluto.updateBandwidth!","text":"updateBandwidth!(pluto, value)\n\nChanges the bandwidth. Prints the new value.\n\nArguments\n\npluto::PlutoSDR : the radio to modify.\nvalue::Int64 : the new sampling rate.\n\nKeywords\n\ndoLog::Bool : toggles the display of the new carrier frequency\n\nReturns\n\nerrno::Int : 0 or a negative error code.\n\n\n\n\n\n","category":"method"},{"location":"adalmpluto/#AdalmPluto.updateCarrierFreq!-Tuple{PlutoSDR,Int64}","page":"AdalmPluto","title":"AdalmPluto.updateCarrierFreq!","text":"updateCarrierFreq!(pluto, value; doLog)\n\nChanges the carrier frequency. Prints the new effective frequency.\n\nArguments\n\npluto::PlutoSDR : the radio to modify.\nvalue::Int64 : the new carrier frequency.\n\nKeywords\n\ndoLog::Bool : toggles the display of the new carrier frequency\n\nReturns\n\nerrno::Int : 0 or a negative error code.\n\n\n\n\n\n","category":"method"},{"location":"adalmpluto/#AdalmPluto.updateGain!-Tuple{PlutoSDR,Int64}","page":"AdalmPluto","title":"AdalmPluto.updateGain!","text":"updateGain!(pluto, value)\n\nChanges the gain control mode to manual et sets the given value. Prints a warning and returns the error code if it doesn't succeed.\n\nArguments\n\npluto::PlutoSDR : the radio to modify.\nvalue::Int64 : the manual gain value.\n\nReturns\n\nerrno::Int : 0 or a negative error code.\n\n\n\n\n\n","category":"method"},{"location":"adalmpluto/#AdalmPluto.updateGainMode!","page":"AdalmPluto","title":"AdalmPluto.updateGainMode!","text":"updateGainMode!(pluto[, mode])\n\nModifies the pluto RX channel gain control mode. Returns an error code < 0 if it doesn't succeed.\n\nArguments\n\npluto::PlutoSDR : the radio to modify.\nmode::GainMode=DEFAULT : the new gain mode. DEFAULT ≡ FAST_ATTACK.\n\nReturns\n\nerrno::Int : 0 or a negative error code.\n\n\n\n\n\n","category":"function"},{"location":"adalmpluto/#AdalmPluto.updateSamplingRate!-Tuple{PlutoSDR,Int64}","page":"AdalmPluto","title":"AdalmPluto.updateSamplingRate!","text":"updateSamplingRate!(pluto, value; doLog)\n\nChanges the sampling rate. Prints the new effective sampling rate.\n\nArguments\n\npluto::PlutoSDR : the radio to modify.\nvalue::Int64 : the new sampling rate.\n\nKeywords\n\ndoLog::Bool : toggles the display of the new carrier frequency\n\nReturns\n\nerrno::Int : 0 or a negative error code.\n\n\n\n\n\n","category":"method"},{"location":"adalmpluto/#Base.close-Tuple{PlutoSDR}","page":"AdalmPluto","title":"Base.close","text":"close(pluto)\n\nFrees the C allocated memory associated to the PlutoSDR structure.\n\n\n\n\n\n","category":"method"},{"location":"adalmpluto/#Private-functions-and-types-from-AdalmPluto","page":"AdalmPluto","title":"Private functions and types from AdalmPluto","text":"","category":"section"},{"location":"adalmpluto/","page":"AdalmPluto","title":"AdalmPluto","text":"Modules = [AdalmPluto]\nPublic  = false","category":"page"},{"location":"adalmpluto/#AdalmPluto.cfgChannels-Tuple{Ptr{iio_channel},Ptr{iio_channel},Ptr{iio_channel},Ptr{iio_channel},ChannelCfg,ChannelCfg}","page":"AdalmPluto","title":"AdalmPluto.cfgChannels","text":"cfgChannels(txChannel, rxChannel, txLoChannel, rxLoChannel, txCfg, rxCfg)\n\nConfigures the RX, RX LO, TX, and TX LO channels from the provided configurations. Returns the configured channels.\n\nArguments\n\ntxChannel::Ptr{iio_channel} : the tx channel.\nrxChannel::Ptr{iio_channel} : the rx channel.\ntxLoChannel::Ptr{iio_channel} : the tx lo channel.\nrxLoChannel::Ptr{iio_channel} : the rx lo channel.\ntxCfg::ChannelCfg : the tx configuration (port / bandwidth / sampling rate / frequency).\nrxCfg::ChannelCfg : the rx configuration (port / bandwidth / sampling rate / frequency).\n\nReturns\n\ntxChannel::Ptr{iio_channel} : a pointer to the configured TX C iio_channel structure.\nrxChannel::Ptr{iio_channel} : a pointer to the configured RX C iio_channel structure.\ntxLoChannel::Ptr{iio_channel} : a pointer to the configured TX Lo C iio_channel structure.\nrxLoChannel::Ptr{iio_channel} : a pointer to the configured RX Lo C iio_channel structure.\n\n\n\n\n\n","category":"method"},{"location":"adalmpluto/#AdalmPluto.cfgChannels-Tuple{Ptr{iio_context},ChannelCfg,ChannelCfg}","page":"AdalmPluto","title":"AdalmPluto.cfgChannels","text":"cfgChannels(context, txCfg, rxCfg)\n\nConfigures the RX, RX LO, TX, and TX LO channels from the provided configurations. Returns the configured channels.\n\nArguments\n\ncontext::Ptr{iio_context} : the context to get the channels from.\ntxCfg::ChannelCfg : the tx configuration (port / bandwidth / sampling rate / frequency).\nrxCfg::ChannelCfg : the rx configuration (port / bandwidth / sampling rate / frequency).\n\nReturns\n\ntxChannel::Ptr{iio_channel} : a pointer to the configured TX C iio_channel structure.\nrxChannel::Ptr{iio_channel} : a pointer to the configured RX C iio_channel structure.\ntxLoChannel::Ptr{iio_channel} : a pointer to the configured TX Lo C iio_channel structure.\nrxLoChannel::Ptr{iio_channel} : a pointer to the configured RX Lo C iio_channel structure.\n\n\n\n\n\n","category":"method"},{"location":"adalmpluto/#AdalmPluto.createBuffer-Tuple{Ptr{iio_device},UInt64}","page":"AdalmPluto","title":"AdalmPluto.createBuffer","text":"createBuffer(device, samplesCount)\n\nCreates a buffer for the provided device. Returns a wrapper around the buffer with basic info (C pointer, sample size, first sample, last sample, steps between samples, Julia complex samples, number of non-queried Julia complex samples).\n\nArguments\n\ndevice::Ptr{iio_device} : the device for which the buffer is created.\nsamplesCound::UInt : the size of the buffer in samples.\n\nReturns\n\nbuffer::IIO_Buffer : a buffer for the given channel with space for samplesCount samples.\n\n\n\n\n\n","category":"method"},{"location":"adalmpluto/#AdalmPluto.createContext-Tuple{String}","page":"AdalmPluto","title":"AdalmPluto.createContext","text":"createContext(uri)\n\nReturns the iio_context corresponding the the provided uri. Throws an error if no devices are found in the context.\n\nArguments\n\nuri::String : the radio URI to get the context from.\n\nReturns\n\ncontext::Ptr{iio_context} : the context for the given URI.\n\n\n\n\n\n","category":"method"},{"location":"adalmpluto/#AdalmPluto.findIQChannels-Tuple{Ptr{iio_device},String,String,Bool}","page":"AdalmPluto","title":"AdalmPluto.findIQChannels","text":"findIQChannels(device, iID, qID, isOutput)\n\nReturns IChannel::Ptr{iio_channel}, QChannel::Ptr{iio_channel} from the given device.\n\nArguments\n\ndevice::Ptr{iio_device} : the device to get the channels from.\niID::String : identification string for the I channel (ex : \"voltage0\").\nqID::String : identification string for the Q channel (ex : \"voltage1\").\nisOutput::Bool : whether the IQ channels are outputs.\n\nReturns\n\nIChannel::Ptr{iio_channel} : the I channel.\nQChannel::Ptr{iio_channel} : the Q channel.\n\n\n\n\n\n","category":"method"},{"location":"adalmpluto/#AdalmPluto.findLoChannels","page":"AdalmPluto","title":"AdalmPluto.findLoChannels","text":"findLoChannels(context[, txLoID, rxLoID])\n\nReturns txLoChannel::Ptr{iio_channel}, rxLoChannel::Ptr{iio_channel} from the given context.\n\nArguments\n\ncontext::Ptr{iio_context} : the context to get the channels from.\ntxLoID::Integer=1 : the tx lo channel number (ex : 1 for tx lo channel \"altvoltage1\").\nrxLoID::Integer=0 : the rx lo channel number (ex : 0 for rx lo channel \"altvoltage0\").\n\nReturns\n\ntxLoChannel::Ptr{iio_channel} : a pointer to the TX Lo C iio_channel structure.\nrxLoChannel::Ptr{iio_channel} : a pointer to the RX Lo C iio_channel structure.\n\n\n\n\n\n","category":"function"},{"location":"adalmpluto/#AdalmPluto.findTRXChannels","page":"AdalmPluto","title":"AdalmPluto.findTRXChannels","text":"findTRXChannels(context[, txID, rxID])\n\nReturns txChannel::Ptr{iio_channel}, rxChannel::Ptr{iio_channel} from the given context.\n\nArguments\n\ncontext::Ptr{iio_context} : the context to get the channels from.\ntxID::Integer=0 : the tx channel number (ex : 0 for tx channel \"voltage0\").\nrxID::Integer=0 : the rx channel number (ex : 0 for rx channel \"voltage0\").\n\nReturns\n\ntxChannel::Ptr{iio_channel} : a pointer to the TX C iio_channel structure.\nrxChannel::Ptr{iio_channel} : a pointer to the RX C iio_channel structure.\n\n\n\n\n\n","category":"function"},{"location":"adalmpluto/#AdalmPluto.findTRXDevices-Tuple{Ptr{iio_context}}","page":"AdalmPluto","title":"AdalmPluto.findTRXDevices","text":"findTRXDevices(context)\n\nReturns txDevice::Ptr{iio_device}, rxDevice::Ptr{iio_device} from the given context.\n\nArguments\n\ncontext::Ptr{iio_context} : the IIO context to get the TX and RX devices from.\n\nReturns\n\ntxDevice::Ptr{iio_device} : a pointer to the TX C iio_device structure.\nrxDevice::Ptr{iio_device} : a pointer to the RX C iio_device structure.\n\n\n\n\n\n","category":"method"},{"location":"adalmpluto/#AdalmPluto.populateBuffer!-Tuple{Any,Array{T,1} where T}","page":"AdalmPluto","title":"AdalmPluto.populateBuffer!","text":"Populate Pluto internal IIO buffer with the desired samples from buffer.  populateBuffer(pluto,buffer)\n\n\n\n\n\n","category":"method"},{"location":"adalmpluto/#AdalmPluto.scan","page":"AdalmPluto","title":"AdalmPluto.scan","text":"scan(backend[, infoIndex, doPrint])\n\nReturns a device URI.\n\nArguments\n\nbackend::String : the backend to scan (local, xml, ip, usb).\ninfoIndex::Integer=1 : the device index.\ndoPrint::Bool=true : toggles console printing of the uri.\n\nReturns\n\nuri::String : the device URI.\n\nC equivalent\n\n\n\n\n\n","category":"function"},{"location":"adalmpluto/#AdalmPluto.updateEffectiveCfg!-Tuple{Union{AdalmPluto.PlutoRx, AdalmPluto.PlutoTx}}","page":"AdalmPluto","title":"AdalmPluto.updateEffectiveCfg!","text":"updateEffectiveCfg!(trx)\n\nUpdates the stored values of the effective sampling rate and carrier frequency of either a PlutoTx or PlutoRx. If the values are different than the ones in the ChannelCfg of the structure, a warning is printed. Returns the effective values values.\n\nArguments\n\ntrx::Union{PlutoTx, PlutoRx} : the structure containing the channel to read the current configuration from.\n\nKeywords\n\ndoLog::Bool : toggles the display of the new carrier frequency\n\nReturns\n\neffectiveSamplingRate::Int : the current sampling rate.\neffectiveCarrierFreq::Int : the current carrier frequency.\n\n\n\n\n\n","category":"method"},{"location":"adalmpluto/#Base.print-Tuple{PlutoSDR}","page":"AdalmPluto","title":"Base.print","text":"print(pluto)    Print the current radio configuration \n\nArguments\n\npluto::PlutoSDR : the radio to receive the samples from, and the structure storing those samples.\n\nReturns\n\nA string with the different configuration aspects\n\n\n\n\n\n","category":"method"},{"location":"adalmpluto/#AdalmPluto.@warnPluto-Tuple{Any,Any}","page":"AdalmPluto","title":"AdalmPluto.@warnPluto","text":"@warnPluto TRX str\n\nPrints custom warnings for either Rx or Tx.\n\nExample\n\n@warnPluto :RX \"msg\" to print a warning concerning the Rx part.\n@warnPluto :TX \"msg\" to print a warning concerning the Tx part.\n\n\n\n\n\n","category":"macro"},{"location":"libiio/device/","page":"device.jl","title":"device.jl","text":"CurrentModule = libIIO_jl","category":"page"},{"location":"libiio/device/#device.jl","page":"device.jl","title":"device.jl","text":"","category":"section"},{"location":"libiio/device/","page":"device.jl","title":"device.jl","text":"Modules = [libIIO_jl]\nPages   = [\"device.md\"]","category":"page"},{"location":"libiio/device/","page":"device.jl","title":"device.jl","text":"Modules = [libIIO_jl]\nPages   = [\"libIIO/device.jl\"]","category":"page"},{"location":"libiio/device/#AdalmPluto.libIIO_jl.C_iio_device_attr_read-Tuple{Ptr{iio_device},String}","page":"device.jl","title":"AdalmPluto.libIIO_jl.C_iio_device_attr_read","text":"C_iio_device_attr_read(device, attr)\n\nRead the content of the given device-specific attribute.\n\nParameters\n\ndevice::Ptr{iio_device} : A pointer to an iio_device structure\nattr::String            : A NULL-terminated string corresponding to the name of the attribute. Passing an empty string reads all the attributes.\n\nReturns\n\nOn success, the number of bytes written to the buffer and the attribute value as a String.\nOn error, a negative errno code is returned along an empty String.\nIf all the attributes are being read, an array of the values above is returned.\n\nThe string may be shorter than the number of bytes returned as the conversion trims excess null characters.\n\nNOTE\n\nBy passing NULL (replaced by an empty string in the Julia wrapper) as the \"attr\" argument to iiodeviceattr_read, it is now possible to read all of the attributes of a device.\n\nThe buffer is filled with one block of data per attribute of the device, by the order they appear in the iio_device structure.\n\nThe first four bytes of one block correspond to a 32-bit signed value in network order. If negative, it corresponds to the errno code that were returned when reading the attribute; if positive, it corresponds to the length of the data read. In that case, the rest of the block contains the data.\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/device/#AdalmPluto.libIIO_jl.C_iio_device_attr_read_all-Tuple{}","page":"device.jl","title":"AdalmPluto.libIIO_jl.C_iio_device_attr_read_all","text":"C_iio_device_attr_read_all()\n\nTHIS IS A PLACEHOLDER. THE DOCUMENTATION BELOW IS ONLY A COPY/PASTE OF THE C DOCUMENTATION.\n\nRead the content of all device-specific attributes.\n\nParameters\n\ndev : A pointer to an iio_device structure\ncb : A pointer to a callback function\ndata : A pointer that will be passed to the callback function\n\nReturns\n\nOn success, 0 is returned\nOn error, a negative errno code is returned\n\nNOTE\n\nThis function is especially useful when used with the network backend, as all the device-specific attributes are read in one single command.\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/device/#AdalmPluto.libIIO_jl.C_iio_device_attr_read_bool-Tuple{Ptr{iio_device},String}","page":"device.jl","title":"AdalmPluto.libIIO_jl.C_iio_device_attr_read_bool","text":"C_iio_device_attr_read_bool(device, attr)\n\nRead the content of the given device-specific attribute.\n\nParameters\n\ndevice::Ptr{iio_device} : A pointer to an iio_device structure\nattr::String            : A NULL-terminated string corresponding to the name of the attribute\n\nReturns\n\nOn success, (0, value::Bool) is returned.\nOn error, (errno, value::Bool) is returned, where errno is a negative error code. value should be discarded.\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/device/#AdalmPluto.libIIO_jl.C_iio_device_attr_read_double-Tuple{Ptr{iio_device},String}","page":"device.jl","title":"AdalmPluto.libIIO_jl.C_iio_device_attr_read_double","text":"C_iio_device_attr_read_double(device, attr)\n\nRead the content of the given device-specific attribute.\n\nParameters\n\ndevice::Ptr{iio_device} : A pointer to an iio_device structure\nattr::String            : A NULL-terminated string corresponding to the name of the attribute\n\nReturns\n\nOn success, (0, value::Float64) is returned.\nOn error, (errno, value::Float64) is returned, where errno is a negative error code. value should be discarded.\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/device/#AdalmPluto.libIIO_jl.C_iio_device_attr_read_longlong-Tuple{Ptr{iio_device},String}","page":"device.jl","title":"AdalmPluto.libIIO_jl.C_iio_device_attr_read_longlong","text":"C_iio_device_attr_read_longlong(device, attr)\n\nRead the content of the given device-specific attribute.\n\nParameters\n\ndevice::Ptr{iio_device} : A pointer to an iio_device structure\nattr::String            : A NULL-terminated string corresponding to the name of the attribute\n\nReturns\n\nOn success, (0, value::Int64) is returned.\nOn error, (errno, value::Int64) is returned, where errno is a negative error code. value should be discarded.\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/device/#AdalmPluto.libIIO_jl.C_iio_device_attr_write-Tuple{Ptr{iio_device},String,String}","page":"device.jl","title":"AdalmPluto.libIIO_jl.C_iio_device_attr_write","text":"C_iio_device_attr_write(device, attr, value)\n\nSet the value of the given device-specific attribute.\n\nParameters\n\ndevice::Ptr{iio_device} : A pointer to an iio_device structure\nattr::String            : A NULL-terminated string corresponding to the name of the attribute\nvalue::String           : A NULL-terminated string to set the attribute to\n\nReturns\n\nOn success, the number of bytes written\nOn error, a negative errno code is returned\n\nNOTE\n\nBy passing NULL as the \"attr\" argument to iio_device_attr_write, it is now possible to write all of the attributes of a device.\n\nThe buffer must contain one block of data per attribute of the device, by the order they appear in the iio_device structure.\n\nThe first four bytes of one block correspond to a 32-bit signed value in network order. If negative, the attribute is not written; if positive, it corresponds to the length of the data to write. In that case, the rest of the block must contain the data.\n\nWARNING\n\nIf the value given is among the available values but not working on the radio, this function returns the success value without actually writing the value.\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/device/#AdalmPluto.libIIO_jl.C_iio_device_attr_write_all-Tuple{}","page":"device.jl","title":"AdalmPluto.libIIO_jl.C_iio_device_attr_write_all","text":"C_iio_device_attr_write_all()\n\nTHIS IS A PLACEHOLDER. THE DOCUMENTATION BELOW IS ONLY A COPY/PASTE OF THE C DOCUMENTATION.\n\nSet the values of all device-specific attributes.\n\nParameters\n\ndev : A pointer to an iio_device structure\ncb : A pointer to a callback function\ndata : A pointer that will be passed to the callback function\n\nReturns\n\nOn success, 0 is returned\nOn error, a negative errno code is returned\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/device/#AdalmPluto.libIIO_jl.C_iio_device_attr_write_bool-Tuple{Ptr{iio_device},String,Bool}","page":"device.jl","title":"AdalmPluto.libIIO_jl.C_iio_device_attr_write_bool","text":"C_iio_device_attr_write_bool(device, attr, value)\n\nSet the value of the given device-specific attribute.\n\nParameters\n\ndevice::Ptr{iio_device} : A pointer to an iio_device structure\nattr::String            : A NULL-terminated string corresponding to the name of the attribute\nvalue::Bool             : A bool value to set the attribute to\n\nReturns\n\nOn success, 0 is returned\nOn error, a negative errno code is returned\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/device/#AdalmPluto.libIIO_jl.C_iio_device_attr_write_double-Tuple{Ptr{iio_device},String,Float64}","page":"device.jl","title":"AdalmPluto.libIIO_jl.C_iio_device_attr_write_double","text":"C_iio_device_attr_write_double(device, attr, value)\n\nSet the value of the given device-specific attribute.\n\nParameters\n\ndevice::Ptr{iio_device} : A pointer to an iio_device structure\nattr::String            : A NULL-terminated string corresponding to the name of the attribute\nvalue::Float64          : A double value to set the attribute to\n\nReturns\n\nOn success, 0 is returned\nOn error, a negative errno code is returned\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/device/#AdalmPluto.libIIO_jl.C_iio_device_attr_write_longlong-Tuple{Ptr{iio_device},String,Int64}","page":"device.jl","title":"AdalmPluto.libIIO_jl.C_iio_device_attr_write_longlong","text":"C_iio_device_attr_write_longlong(device, attr, value)\n\nSet the value of the given device-specific attribute.\n\nParameters\n\ndevice::Ptr{iio_device} : A pointer to an iio_device structure\nattr::String            : A NULL-terminated string corresponding to the name of the attribute\nvalue::Int64            : A long long value to set the attribute to\n\nReturns\n\nOn success, 0 is returned\nOn error, a negative errno code is returned\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/device/#AdalmPluto.libIIO_jl.C_iio_device_attr_write_raw-Tuple{Ptr{iio_device},String,Ptr{Nothing},UInt64}","page":"device.jl","title":"AdalmPluto.libIIO_jl.C_iio_device_attr_write_raw","text":"C_iio_device_attr_write_raw(device, attr, value)\n\nSet the value of the given device-specific attribute.\n\nParameters\n\ndevice::Ptr{iio_device} : A pointer to an iio_device structure\nattr::String            : A NULL-terminated string corresponding to the name of the attribute\nvalue::Ptr{Cvoid}       : A pointer to the data to be written\nsize::Csize_t           : The number of bytes to be written\n\nReturns\n\nOn success, the number of bytes written\nOn error, a negative errno code is returned\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/device/#AdalmPluto.libIIO_jl.C_iio_device_buffer_attr_read-Tuple{Ptr{iio_device},String}","page":"device.jl","title":"AdalmPluto.libIIO_jl.C_iio_device_buffer_attr_read","text":"C_iio_device_buffer_attr_read(device, attr)\n\nRead the content of the given buffer-specific attribute.\n\nParameters\n\ndevice::Ptr{iio_device} : A pointer to an iio_device structure\nattr::String            : A NULL-terminated string corresponding to the name of the attribute. Passing an empty string reads all the attributes.\n\nReturns\n\nOn success, (numberofbytes, value::String) is returned, where number of bytes should be the length of the string.\nOn error, (errno, \"\") is returned, where errno is a negative error code.\nIf all the attributes are being read, an array of the values above is returned.\n\nThe string may be shorter than the actual number of bytes returned as the conversion trims excess null characters.\n\nNOTE\n\nBy passing NULL (replaced by an empty string in the Julia wrapper) as the \"attr\" argument to iio_device_buffer_attr_read, it is now possible to read all of the attributes of a device.\n\nThe buffer is filled with one block of data per attribute of the buffer, by the order they appear in the iio_device structure.\n\nThe first four bytes of one block correspond to a 32-bit signed value in network order. If negative, it corresponds to the errno code that were returned when reading the attribute; if positive, it corresponds to the length of the data read. In that case, the rest of the block contains the data.\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/device/#AdalmPluto.libIIO_jl.C_iio_device_buffer_attr_read_all-Tuple{}","page":"device.jl","title":"AdalmPluto.libIIO_jl.C_iio_device_buffer_attr_read_all","text":"C_iio_device_buffer_attr_read_all()\n\nTHIS IS A PLACEHOLDER. THE DOCUMENTATION BELOW IS ONLY A COPY/PASTE OF THE C DOCUMENTATION.\n\nRead the content of all buffer-specific attributes.\n\nParameters\n\ndev : A pointer to an iio_device structure\ncb : A pointer to a callback function\ndata : A pointer that will be passed to the callback function\n\nReturns\n\nOn success, 0 is returned\nOn error, a negative errno code is returned\n\nNOTE\n\nThis function is especially useful when used with the network backend, as all the buffer-specific attributes are read in one single command.\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/device/#AdalmPluto.libIIO_jl.C_iio_device_buffer_attr_read_bool-Tuple{Ptr{iio_device},String}","page":"device.jl","title":"AdalmPluto.libIIO_jl.C_iio_device_buffer_attr_read_bool","text":"C_iio_device_buffer_attr_read_bool(device, attr)\n\nRead the content of the given buffer-specific attribute.\n\nParameters\n\ndevice::Ptr{iio_device} : A pointer to an iio_device structure\nattr::String            : A NULL-terminated string corresponding to the name of the attribute\n\nReturns\n\nOn success, (0, value::Bool) is returned.\nOn error, (errno, value::Bool) is returned, where errno is a negative error code. value should be discarded.\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/device/#AdalmPluto.libIIO_jl.C_iio_device_buffer_attr_read_double-Tuple{Ptr{iio_device},String}","page":"device.jl","title":"AdalmPluto.libIIO_jl.C_iio_device_buffer_attr_read_double","text":"C_iio_device_buffer_attr_read_double(device, attr)\n\nRead the content of the given buffer-specific attribute.\n\nParameters\n\ndevice::Ptr{iio_device} : A pointer to an iio_device structure\nattr::String            : A NULL-terminated string corresponding to the name of the attribute\n\nReturns\n\nOn success, (0, value::Float64) is returned.\nOn error, (errno, value::Float64) is returned, where errno is a negative error code. value should be discarded.\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/device/#AdalmPluto.libIIO_jl.C_iio_device_buffer_attr_read_longlong-Tuple{Ptr{iio_device},String}","page":"device.jl","title":"AdalmPluto.libIIO_jl.C_iio_device_buffer_attr_read_longlong","text":"C_iio_device_buffer_attr_read_longlong(device, attr)\n\nRead the content of the given buffer-specific attribute.\n\nParameters\n\ndevice::Ptr{iio_device} : A pointer to an iio_device structure\nattr::String            : A NULL-terminated string corresponding to the name of the attribute\n\nReturns\n\nOn success, (0, value::Int64) is returned.\nOn error, (errno, value::Int64) is returned, where errno is a negative error code. value should be discarded.\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/device/#AdalmPluto.libIIO_jl.C_iio_device_buffer_attr_write-Tuple{Ptr{iio_device},String,String}","page":"device.jl","title":"AdalmPluto.libIIO_jl.C_iio_device_buffer_attr_write","text":"C_iio_device_buffer_attr_write(device, attr, value)\n\nSet the value of the given buffer-specific attribute.\n\nParameters\n\ndevice::Ptr{iio_device} : A pointer to an iio_device structure\nattr::String            : A NULL-terminated string corresponding to the name of the attribute\nvalue::String           : A NULL-terminated string to set the attribute to\n\nReturns\n\nOn success, the number of bytes written\nOn error, a negative errno code is returned\n\nNOTE\n\nBy passing NULL as the \"attr\" argument to iio_device_buffer_attr_write, it is now possible to write all of the attributes of a device.\n\nThe buffer must contain one block of data per attribute of the buffer, by the order they appear in the iio_device structure.\n\nThe first four bytes of one block correspond to a 32-bit signed value in network order. If negative, the attribute is not written; if positive, it corresponds to the length of the data to write. In that case, the rest of the block must contain the data.\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/device/#AdalmPluto.libIIO_jl.C_iio_device_buffer_attr_write_all-Tuple{}","page":"device.jl","title":"AdalmPluto.libIIO_jl.C_iio_device_buffer_attr_write_all","text":"C_iio_device_buffer_attr_write_all()\n\nTHIS IS A PLACEHOLDER. THE DOCUMENTATION BELOW IS ONLY A COPY/PASTE OF THE C DOCUMENTATION.\n\nSet the values of all buffer-specific attributes.\n\nParameters\n\ndev : A pointer to an iio_device structure\ncb : A pointer to a callback function\ndata : A pointer that will be passed to the callback function\n\nReturns\n\nOn success, 0 is returned\nOn error, a negative errno code is returned\n\nNOTE\n\nThis function is especially useful when used with the network backend, as all the buffer-specific attributes are written in one single command.\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/device/#AdalmPluto.libIIO_jl.C_iio_device_buffer_attr_write_bool-Tuple{Ptr{iio_device},String,Bool}","page":"device.jl","title":"AdalmPluto.libIIO_jl.C_iio_device_buffer_attr_write_bool","text":"C_iio_device_buffer_attr_write_bool(device, attr, value)\n\nSet the value of the given buffer-specific attribute.\n\nParameters\n\ndevice::Ptr{iio_device} : A pointer to an iio_device structure\nattr::String            : A NULL-terminated string corresponding to the name of the attribute\nvalue::Bool             : A bool value to set the attribute to\n\nReturns\n\nOn success, 0 is returned\nOn error, a negative errno code is returned\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/device/#AdalmPluto.libIIO_jl.C_iio_device_buffer_attr_write_double-Tuple{Ptr{iio_device},String,Float64}","page":"device.jl","title":"AdalmPluto.libIIO_jl.C_iio_device_buffer_attr_write_double","text":"C_iio_device_buffer_attr_write_double(device, attr, value)\n\nSet the value of the given buffer-specific attribute.\n\nParameters\n\ndevice::Ptr{iio_device} : A pointer to an iio_device structure\nattr::String            : A NULL-terminated string corresponding to the name of the attribute\nvalue::Float64          : A double value to set the attribute to\n\nReturns\n\nOn success, 0 is returned\nOn error, a negative errno code is returned\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/device/#AdalmPluto.libIIO_jl.C_iio_device_buffer_attr_write_longlong-Tuple{Ptr{iio_device},String,Int64}","page":"device.jl","title":"AdalmPluto.libIIO_jl.C_iio_device_buffer_attr_write_longlong","text":"C_iio_device_buffer_attr_write_longlong(device, attr, value)\n\nSet the value of the given buffer-specific attribute.\n\nParameters\n\ndevice::Ptr{iio_device} : A pointer to an iio_device structure\nattr::String            : A NULL-terminated string corresponding to the name of the attribute\nvalue::Int64            : A long long value to set the attribute to\n\nReturns\n\nOn success, 0 is returned\nOn error, a negative errno code is returned\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/device/#AdalmPluto.libIIO_jl.C_iio_device_buffer_attr_write_raw-Tuple{Ptr{iio_device},String,Ptr{Nothing},UInt64}","page":"device.jl","title":"AdalmPluto.libIIO_jl.C_iio_device_buffer_attr_write_raw","text":"C_iio_device_buffer_attr_write_raw(device, attr, value)\n\nSet the value of the given buffer-specific attribute.\n\nParameters\n\ndevice::Ptr{iio_device} : A pointer to an iio_device structure\nattr::String            : A NULL-terminated string corresponding to the name of the attribute\nvalue::Ptr{Cvoid}       : A pointer to the data to be written\nsize::Csize_t           : The number of bytes to be written\n\nReturns\n\nOn success, the number of bytes written\nOn error, a negative errno code is returned\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/device/#AdalmPluto.libIIO_jl.C_iio_device_find_attr-Tuple{Ptr{iio_device},String}","page":"device.jl","title":"AdalmPluto.libIIO_jl.C_iio_device_find_attr","text":"C_iio_device_find_attr(device, name)\n\nTry to find a device-specific attribute by its name.\n\nParameters\n\ndevice::Ptr{iio_device} : A pointer to an iio_device structure\nname::String            : A NULL-terminated string corresponding to the name of the attribute\n\nReturns\n\nOn success, a NULL-terminated string.\nOn failure, if the assertions are enabled, throws an error.\nOn failure, if the assertions are disabled, returns an empty string.\n\nNOTE\n\nThis function is useful to detect the presence of an attribute. It can also be used to retrieve the name of an attribute as a pointer to a static string from a dynamically allocated string.\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/device/#AdalmPluto.libIIO_jl.C_iio_device_find_buffer_attr-Tuple{Ptr{iio_device},String}","page":"device.jl","title":"AdalmPluto.libIIO_jl.C_iio_device_find_buffer_attr","text":"C_iio_device_find_buffer_attr(device, name)\n\nTry to find a buffer-specific attribute by its name.\n\nParameters\n\ndevice::Ptr{iio_device} : A pointer to an iio_device structure\nname::String            : A NULL-terminated string corresponding to the name of the attribute\n\nReturns\n\nOn success, a NULL-terminated string.\nOn failure, if the assertions are enabled, throws an error.\nOn failure, if the assertions are disabled, returns an empty string.\n\nNOTE\n\nThis function is useful to detect the presence of an attribute. It can also be used to retrieve the name of an attribute as a pointer to a static string from a dynamically allocated string.\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/device/#AdalmPluto.libIIO_jl.C_iio_device_find_channel-Tuple{Ptr{iio_device},String,Bool}","page":"device.jl","title":"AdalmPluto.libIIO_jl.C_iio_device_find_channel","text":"C_iio_device_find_channel(device, name, isOutput)\n\nTry to find a channel structure by its name of ID.\n\nParameters\n\ndevice::Ptr{iio_device} : A pointer to an iio_device structure\nname::String            : A NULL-terminated string corresponding to the name or the ID of the channel to search for\nisOutput::Bool          : True if the searched channel is output, False otherwise\n\nReturns\n\nOn success, a pointer to an iio_channel structure\nOn failure, if the assertions are enabled, throws an error.\nOn failure, if the assertions are disabled, returns NULL.\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/device/#AdalmPluto.libIIO_jl.C_iio_device_get_attr-Tuple{Ptr{iio_device},UInt32}","page":"device.jl","title":"AdalmPluto.libIIO_jl.C_iio_device_get_attr","text":"C_iio_device_get_attr(device, index)\n\nGet the device-specific attribute present at the given index.\n\nParameters\n\ndevice::Ptr{iio_device} : A pointer to an iio_device structure\nindex::UInt32           : The index corresponding to the attribute\n\nReturns\n\nOn success, a NULL-terminated string.\nOn failure, if the assertions are enabled, throws an error.\nOn failure, if the assertions are disabled, returns an empty string.\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/device/#AdalmPluto.libIIO_jl.C_iio_device_get_attrs_count-Tuple{Ptr{iio_device}}","page":"device.jl","title":"AdalmPluto.libIIO_jl.C_iio_device_get_attrs_count","text":"C_iio_device_get_attrs_count(device)\n\nEnumerate the device-specific attributes of the given device.\n\nParameters\n\ndevice::Ptr{iio_device} : A pointer to an iio_device structure\n\nReturns\n\nThe number of device-specific attributes found\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/device/#AdalmPluto.libIIO_jl.C_iio_device_get_buffer_attr-Tuple{Ptr{iio_device},UInt32}","page":"device.jl","title":"AdalmPluto.libIIO_jl.C_iio_device_get_buffer_attr","text":"C_iio_device_get_buffer_attr(device, index)\n\nGet the buffer-specific attribute present at the given index.\n\nParameters\n\ndevice::Ptr{iio_device} : A pointer to an iio_device structure\nindex::UInt32           : The index corresponding to the attribute\n\nReturns\n\nOn success, a NULL-terminated string.\nOn failure, if the assertions are enabled, throws an error.\nOn failure, if the assertions are disabled, returns an empty string.\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/device/#AdalmPluto.libIIO_jl.C_iio_device_get_buffer_attrs_count-Tuple{Ptr{iio_device}}","page":"device.jl","title":"AdalmPluto.libIIO_jl.C_iio_device_get_buffer_attrs_count","text":"C_iio_device_get_buffer_attrs_count(device)\n\nEnumerate the buffer-specific attributes of the given device.\n\nParameters\n\ndevice::Ptr{iio_device} : A pointer to an iio_device structure\n\nReturns\n\nThe number of buffer-specific attributes found\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/device/#AdalmPluto.libIIO_jl.C_iio_device_get_channel-Tuple{Ptr{iio_device},UInt32}","page":"device.jl","title":"AdalmPluto.libIIO_jl.C_iio_device_get_channel","text":"C_iio_device_get_channel(device, index)\n\nGet the channel present at the given index.\n\nParameters\n\ndevice::Ptr{iio_device} : A pointer to an iio_device structure\nindex::UInt32           : The index corresponding to the channel\n\nReturns\n\nOn success, a pointer to an iio_channel structure\nOn failure, if the assertions are enabled, throws an error.\nOn failure, if the assertions are disabled, returns NULL.\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/device/#AdalmPluto.libIIO_jl.C_iio_device_get_channels_count-Tuple{Ptr{iio_device}}","page":"device.jl","title":"AdalmPluto.libIIO_jl.C_iio_device_get_channels_count","text":"C_iio_device_get_channels_count(device)\n\nRetrieve a pointer to the iio_context structure.\n\nParameters\n\ndevice::Ptr{iio_device} : A pointer to an iio_device structure\n\nReturns\n\nA pointer to an iio_context structure\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/device/#AdalmPluto.libIIO_jl.C_iio_device_get_context-Tuple{Ptr{iio_device}}","page":"device.jl","title":"AdalmPluto.libIIO_jl.C_iio_device_get_context","text":"C_iio_device_get_context(device)\n\nRetrieve a pointer to the iio_context structure.\n\nParameters\n\ndevice::Ptr{iio_device} : A pointer to an iio_device structure\n\nReturns\n\nA pointer to an iio_context structure\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/device/#AdalmPluto.libIIO_jl.C_iio_device_get_data-Tuple{Ptr{iio_device}}","page":"device.jl","title":"AdalmPluto.libIIO_jl.C_iio_device_get_data","text":"C_iio_device_get_data(device)\n\nRetrieve a previously associated pointer of an iio_device structure.\n\nParameters\n\ndevice::Ptr{iio_device} : A pointer to an iio_device structure\n\nReturns\n\nThe pointer previously associated if present, or NULL\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/device/#AdalmPluto.libIIO_jl.C_iio_device_get_id-Tuple{Ptr{iio_device}}","page":"device.jl","title":"AdalmPluto.libIIO_jl.C_iio_device_get_id","text":"C_iio_device_get_id(device)\n\nRetrieve the device ID (e.g. iio:device0)\n\nParameters\n\ndevice::Ptr{iio_device} : A pointer to an iio_device structure\n\nReturns\n\nA NULL-terminated string\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/device/#AdalmPluto.libIIO_jl.C_iio_device_get_name-Tuple{Ptr{iio_device}}","page":"device.jl","title":"AdalmPluto.libIIO_jl.C_iio_device_get_name","text":"C_iio_device_get_name(device)\n\nRetrieve the device name (e.g. xadc)\n\nParameters\n\ndevice::Ptr{iio_device} : A pointer to an iio_device structure\n\nReturns\n\nA NULL-terminated string\n\nNOTE\n\nIf the device has no name and the assertions are enabled, throws an error. If the device has no name and the assertions are enabled, returns an emtpy string.\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/device/#AdalmPluto.libIIO_jl.C_iio_device_get_trigger-Tuple{Ptr{iio_device}}","page":"device.jl","title":"AdalmPluto.libIIO_jl.C_iio_device_get_trigger","text":"C_iio_device_get_trigger(device)\n\nRetrieve the trigger of a given device.\n\nParameters\n\ndevice::Ptr{iio_device} : A pointer to an iio_device structure\n\nReturns\n\nOn success, (0, trigger::Ptr{iio_device}) is returned.\nOn error, (errno, NULL) is returned, where errno is a negative error code.\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/device/#AdalmPluto.libIIO_jl.C_iio_device_is_trigger-Tuple{Ptr{iio_device}}","page":"device.jl","title":"AdalmPluto.libIIO_jl.C_iio_device_is_trigger","text":"C_iio_device_is_trigger(device)\n\nReturn True if the given device is a trigger.\n\nParameters\n\ndevice::Ptr{iio_device} : A pointer to an iio_device structure\n\nReturns\n\nTrue if the device is a trigger, False otherwise\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/device/#AdalmPluto.libIIO_jl.C_iio_device_set_data-Tuple{Ptr{iio_device},Ptr{Nothing}}","page":"device.jl","title":"AdalmPluto.libIIO_jl.C_iio_device_set_data","text":"C_iio_device_set_data(device, data)\n\nAssociate a pointer to an iio_device structure. If the pointer is a Julia pointer, you need to protect the data from the GC.\n\nSee the Julia Documentation and GC.@preserve.\n\nParameters\n\ndevice::Ptr{iio_device} : A pointer to an iio_device structure\ndata::Ptr{Cvoid}        : A pointer to the data to be associated.\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/device/#AdalmPluto.libIIO_jl.C_iio_device_set_kernel_buffers_count-Tuple{Ptr{iio_device},UInt32}","page":"device.jl","title":"AdalmPluto.libIIO_jl.C_iio_device_set_kernel_buffers_count","text":"C_iio_device_set_kernel_buffers_count(device, nb_buffers)\n\nConfigure the number of kernel buffers for a device.\n\nThis function allows to change the number of buffers on kernel side.\n\nParameters\n\ndevice::Ptr{iio_device} : A pointer to an iio_device structure\nnb_buffers::UInt32      : The number of buffers\n\nReturns\n\nOn success, 0 is returned\nOn error, a negative errno code is returned\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/device/#AdalmPluto.libIIO_jl.C_iio_device_set_trigger-Tuple{Ptr{iio_device},Ptr{iio_device}}","page":"device.jl","title":"AdalmPluto.libIIO_jl.C_iio_device_set_trigger","text":"C_iio_device_set_trigger(device, trigger)\n\nAssociate a trigger to a given device.\n\nParameters\n\ndevice::Ptr{iio_device}  : A pointer to an iio_device structure\ntrigger::Ptr{iio_device} : a pointer to the iio_device structure corresponding to the trigger that should be associated.\n\nReturns\n\nOn success, 0 is returned\nOn error, a negative errno code is returned\n\nlibIIO documentation\n\n\n\n\n\n","category":"method"},{"location":"libiio/structures/","page":"structures.jl","title":"structures.jl","text":"CurrentModule = libIIO_jl","category":"page"},{"location":"libiio/structures/#structures.jl","page":"structures.jl","title":"structures.jl","text":"","category":"section"},{"location":"libiio/structures/","page":"structures.jl","title":"structures.jl","text":"Modules = [libIIO_jl]\nPages   = [\"structures.md\"]","category":"page"},{"location":"libiio/structures/","page":"structures.jl","title":"structures.jl","text":"Modules = [libIIO_jl]\nPages   = [\"libIIO/structures.jl\"]","category":"page"},{"location":"libiio/structures/#AdalmPluto.libIIO_jl.iio_buffer","page":"structures.jl","title":"AdalmPluto.libIIO_jl.iio_buffer","text":"iio_buffer\n\nEmpty struct to manage pointers to the iio_buffer C struct.\n\nlibIIO documentation\n\n\n\n\n\n","category":"type"},{"location":"libiio/structures/#AdalmPluto.libIIO_jl.iio_channel","page":"structures.jl","title":"AdalmPluto.libIIO_jl.iio_channel","text":"iio_channel\n\nEmpty struct to manage pointers to the iio_channel C struct.\n\nlibIIO documentation\n\n\n\n\n\n","category":"type"},{"location":"libiio/structures/#AdalmPluto.libIIO_jl.iio_context","page":"structures.jl","title":"AdalmPluto.libIIO_jl.iio_context","text":"iio_context\n\nEmpty struct to manage pointers to the iio_context C struct.\n\nlibIIO documentation\n\n\n\n\n\n","category":"type"},{"location":"libiio/structures/#AdalmPluto.libIIO_jl.iio_context_info","page":"structures.jl","title":"AdalmPluto.libIIO_jl.iio_context_info","text":"iio_context_info\n\nEmpty struct to manage pointers to the iio_context_info C struct.\n\nlibIIO documentation\n\n\n\n\n\n","category":"type"},{"location":"libiio/structures/#AdalmPluto.libIIO_jl.iio_data_format","page":"structures.jl","title":"AdalmPluto.libIIO_jl.iio_data_format","text":"iio_data_format\n\nEmpty struct to manage pointers to the iio_data_format C struct.\n\nlibIIO documentation\n\n\n\n\n\n","category":"type"},{"location":"libiio/structures/#AdalmPluto.libIIO_jl.iio_device","page":"structures.jl","title":"AdalmPluto.libIIO_jl.iio_device","text":"iio_device\n\nEmpty struct to manage pointers to the iio_device C struct.\n\nlibIIO documentation\n\n\n\n\n\n","category":"type"},{"location":"libiio/structures/#AdalmPluto.libIIO_jl.iio_scan_block","page":"structures.jl","title":"AdalmPluto.libIIO_jl.iio_scan_block","text":"iio_scan_block\n\nEmpty struct to manage pointers to the iio_scan_block C struct.\n\nlibIIO documentation\n\n\n\n\n\n","category":"type"},{"location":"libiio/structures/#AdalmPluto.libIIO_jl.iio_scan_context","page":"structures.jl","title":"AdalmPluto.libIIO_jl.iio_scan_context","text":"iio_scan_context\n\nEmpty struct to manage pointers to the iio_scan_context C struct.\n\nlibIIO documentation\n\n\n\n\n\n","category":"type"},{"location":"libiio/structures/#AdalmPluto.libIIO_jl.@assert_null_pointer-Tuple{Any}","page":"structures.jl","title":"AdalmPluto.libIIO_jl.@assert_null_pointer","text":"@assert_null_pointer expression\n\nThrows an error if the expression returns a null pointer.\nIf the expression return a `Ptr{type}` the error message is \"type* null pointer\".\n\n\n\n\n\n","category":"macro"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = AdalmPluto","category":"page"},{"location":"#AdalmPluto","page":"Home","title":"AdalmPluto","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"}]
}
